import {
  Button,
  Card,
  Grid,
  Radio,
  MenuItem,
  Table,
  Snackbar,
  Switch,
  TextField
} from '@material-ui/core';
import axios from 'axios';
import { BASEURL } from 'config/conf';
import React, { useState, useEffect } from 'react';
import { NavLink } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import moment from 'moment';
import {
  KeyboardDatePicker,
  MuiPickersUtilsProvider
} from '@material-ui/pickers';

import 'date-fns';
import DateFnsUtils from '@date-io/date-fns';
import apicaller from 'helper/Apicaller';
const CreateAutoNumberingSetupEmployeeID = ({ autoNumberingData, setAutoNumberingData }) => {
  const [isSubmitted, setIsSubmitted] = useState();

  const jobTypesArray = [
    {
      jobType: 'Consultant',
      isAlphaNumeric: false,
      isSuffix: false,
      alphaNumericPart: 'Prefix',
      autoNumberingCode: '',
      autoNumberingNumber: 0,
      isDisabled: true
    },
    {
      jobType: 'Contractor',
      isAlphaNumeric: false,
      isSuffix: false,
      alphaNumericPart: 'Prefix',
      autoNumberingCode: '',
      autoNumberingNumber: 0,
      isDisabled: true
    },
    {
      jobType: 'Employee',
      isAlphaNumeric: false,
      isSuffix: false,
      alphaNumericPart: 'Prefix',
      autoNumberingCode: '',
      autoNumberingNumber: 0,
      isDisabled: true
    },
    {
      jobType: 'Intern',
      isAlphaNumeric: false,
      isSuffix: false,
      alphaNumericPart: 'Prefix',
      autoNumberingCode: '',
      autoNumberingNumber: 0,
      isDisabled: true
    }
  ];

  const [autoGenerated, setautoGenerated] = useState(
    autoNumberingData.autoGenerated
  );
  const [isAlphaNumeric, setIsAlphaNumeric] = useState(
    autoNumberingData.isAlphaNumeric
  );
  const [basedOnJobType, setbasedOnJobType] = useState(
    autoNumberingData.basedOnJobType
  );
  const [sequenceCode, setsequenceCode] = useState(
    autoNumberingData.sequenceCode
  );
  const [isSuffix, setisSuffix] = useState(autoNumberingData.alphaNumericPart);
  const [sequenceNumber, setsequenceNumber] = useState(
    autoNumberingData.sequenceNumber
  );

  const [jobTypesData, setJobTypesData] = useState([]);

  useEffect(() => {
    if (basedOnJobType) {
      //TODO: SET WITH JOB TYPES API RESPONSE
      setJobTypesData(jobTypesArray);
    }
    getAutoNumberingData();
  }, []);

  const getAutoNumberingData = () => {
    apicaller('post', `${BASEURL}/autoNumbering/byType`, {
      type: "EMP"
    })
      .then((res) => {
        if (res.status === 200) {
          let autoNumberingDataResp = res.data;
          autoNumberingDataResp.alphaNumericPart = autoNumberingDataResp.isSuffix ? "Suffix" : "Prefix"
          setAutoNumberingData(autoNumberingDataResp);
          setautoGenerated(autoNumberingDataResp.autoGenerated);
          setIsAlphaNumeric(autoNumberingDataResp.isAlphaNumeric);
          setsequenceCode(autoNumberingDataResp.sequenceCode)
          setisSuffix(autoNumberingDataResp.alphaNumericPart)
          setsequenceNumber(autoNumberingDataResp.sequenceNumber);
          setbasedOnJobType(
            autoNumberingDataResp.autoNumberingItems.length > 0 ? true : false
          );
          const newArray = autoNumberingDataResp.autoNumberingItems.map(
            (item) => {
              if (item.isAlphaNumeric) {
                item.isDisabled = false;
              } else {
                item.isDisabled = true;
              }
              return { ...item };
            }
          );
          setJobTypesData(newArray);
        }
      })
      .catch((err) => {
        console.log('Fetch autonumbering bytype error', err);
      });
  };

  const handleChangeJobTypesData = (index) => (e) => {
    const newArray = jobTypesData.map((item, i) => {
      if (index === i) {
        if (e.target.name === 'isAlphaNumeric') {
          item.isAlphaNumeric = e.target.checked;
          item.isDisabled = !e.target.checked;
          if (e.target.checked === false) {
            item.isSuffix = false;
            item.autoNumberingCode = '';
            item.autoNumberingNumber = '';
          }
          return { ...item };
        } else {
          return { ...item, [e.target.name]: e.target.value };
        }
      } else {
        return item;
      }
    });
    setJobTypesData(newArray);
    setAutoNumberingData({
      ...autoNumberingData,
      autoNumberingItems: newArray
    });
  };

  return (
    <Card style={{ paddingTop: '30px', paddingBottom: '30px' }}>
      <Grid container spacing={0}>
        <Grid item xs={10} md={10} lg={10} xl={11} className="mx-auto">
          <Grid container spacing={0}>
            <Grid item container direction="row">
              <Grid item md={10} lg={7} xl={12}>
                <label style={{ marginTop: '15px' }} className="mb-2">
                  <strong>EmployeeID</strong>
                </label>
              </Grid>
            </Grid>
            <Grid
              item
              container
              direction="row"
              spacing={6}
              justify="flex-end"
              alignItems="center">
              <Grid item md={6} className="mx-auto">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  Do you want the Employee ID to be Auto Generated
                </label>
              </Grid>
              <Grid item md={6} className="mx-auto">
                <Switch
                  value={autoGenerated}
                  checked={autoGenerated}
                  onChange={(event) => {
                    setautoGenerated(event.target.checked);
                    setAutoNumberingData({
                      ...autoNumberingData,
                      autoGenerated: event.target.checked
                    });
                  }}
                  className="switch-small"
                />
              </Grid>
            </Grid>
            {false&&autoGenerated && (
              <Grid
                item
                container
                direction="row"
                spacing={6}
                justify="flex-end"
                alignItems="center">
                <Grid item md={6} className="mx-auto">
                  <label style={{ marginTop: '15px' }} className=" mb-2">
                    Is it based on Job Type
                  </label>
                </Grid>
                <Grid item md={6} className="mx-auto">
                  <Switch
                    value={basedOnJobType}
                    checked={basedOnJobType}
                    onChange={(event) => {
                      setbasedOnJobType(event.target.checked);
                      setAutoNumberingData({
                        ...autoNumberingData,
                        basedOnJobType: event.target.checked
                      });
                      setJobTypesData(jobTypesArray);
                    }}
                    className="switch-small"
                  />
                </Grid>
              </Grid>
            )}
            {false&&basedOnJobType ? (
              <Grid container spacing={0}>
                <div className="p-4">
                  <div className="table-responsive-md">
                    <Table className="table table-alternate-spaced mb-0">
                      <thead>
                        <tr>
                          <th
                            style={{ width: '200px' }}
                            className="font-size-lg font-weight-bold pb-4 text-capitalize text-center"
                            scope="col">
                            Job Type
                          </th>
                          <th
                            style={{ width: '200px' }}
                            className="font-size-lg font-weight-bold pb-4 text-capitalize  text-center"
                            scope="col">
                            Alphanumeric
                          </th>
                          <th
                            style={{ width: '300px' }}
                            className="font-size-lg font-weight-bold pb-4 text-capitalize "
                            scope="col">
                            Text
                          </th>
                          <th
                            style={{ width: '300px' }}
                            className="font-size-lg font-weight-bold pb-4 text-capitalize "
                            scope="col">
                            Text Position
                          </th>
                          <th
                            style={{ width: '300px' }}
                            className="font-size-lg font-weight-bold pb-4 text-capitalize "
                            scope="col">
                            Last Assigned ID
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {jobTypesData.map((item, idx) => (
                          <>
                            <tr>
                              <td className="text-center text-black-50">
                                <TextField
                                  id="outlined-jobType"
                                  name="jobType"
                                  placeholder="Job Type"
                                  type="text"
                                  variant="outlined"
                                  fullWidth
                                  size="small"
                                  value={item.jobType}
                                  onChange={handleChangeJobTypesData(idx)}
                                  disabled={true}
                                />
                              </td>
                              <td className="text-center">
                                <Switch
                                  name="isAlphaNumeric"
                                  checked={item.isAlphaNumeric}
                                  onChange={handleChangeJobTypesData(idx)}
                                  className="switch-small"
                                />
                              </td>
                              <td className="text-center text-black-50">
                                <TextField
                                  id="outlined-autoNumberingCode"
                                  name="autoNumberingCode"
                                  placeholder="Auto Numbering Code"
                                  type="text"
                                  variant="outlined"
                                  fullWidth
                                  size="small"
                                  value={item.autoNumberingCode}
                                  onChange={handleChangeJobTypesData(idx)}
                                  disabled={item.isDisabled}
                                />
                              </td>
                              <td className="text-center text-black-50">
                                <TextField
                                  id="outlined-status"
                                  name="isSuffix"
                                  // required
                                  label=""
                                  variant="outlined"
                                  fullWidth
                                  select
                                  size="small"
                                  value={item.isSuffix}
                                  onChange={handleChangeJobTypesData(idx)}
                                  disabled={item.isDisabled}>
                                  <MenuItem key="true" value="true">
                                    Suffix
                                  </MenuItem>
                                  <MenuItem key="false" value="false">
                                    Prefix
                                  </MenuItem>
                                </TextField>
                              </td>
                              <td className="text-center text-black-50">
                                <TextField
                                  id="outlined-autoNumberingNumber"
                                  name="autoNumberingNumber"
                                  placeholder="Last AssignedId"
                                  type="text"
                                  variant="outlined"
                                  fullWidth
                                  size="small"
                                  value={item.autoNumberingNumber}
                                  onChange={handleChangeJobTypesData(idx)}
                                  disabled={item.isDisabled}
                                />
                              </td>
                            </tr>
                            <tr className="divider"></tr>
                          </>
                        ))}

                      </tbody>
                    </Table>
                  </div>
                </div>
              </Grid>
            ) : (
              <Grid container spacing={0}>
                {autoGenerated && (
                  <Grid
                    item
                    container
                    direction="row"
                    spacing={6}
                    justify="flex-end"
                    alignItems="center">
                    <Grid item md={6} className="mx-auto">
                      <label style={{ marginTop: '15px' }} className=" mb-2">
                        Do you want the Employee ID to be Alphanumeric
                      </label>
                    </Grid>
                    <Grid item md={6} className="mx-auto">
                      <Switch
                        value={isAlphaNumeric}
                        checked={isAlphaNumeric}
                        onChange={(event) => {
                          setIsAlphaNumeric(event.target.checked);
                          setAutoNumberingData({
                            ...autoNumberingData,
                            isAlphaNumeric: event.target.checked
                          });
                        }}
                        className="switch-small"
                      />
                    </Grid>
                  </Grid>
                )}
                {autoGenerated&&isAlphaNumeric && (
                  <Grid
                    item
                    container
                    direction="row"
                    spacing={6}
                    justify="flex-end"
                    alignItems="center">
                    <Grid item md={6} className="mx-auto">
                      <label style={{ marginTop: '15px' }} className=" mb-2">
                        What is the Alphanumeric part of the EmployeeID
                      </label>
                    </Grid>
                    <Grid item md={6} className="mx-auto">
                      <TextField
                        id="outlined-sequenceCode"
                        placeholder="Alphanumeric EmployeeID"
                        variant="outlined"
                        fullWidth
                        size="small"
                        value={sequenceCode}
                        onChange={(event) => {
                          const result = event.target.value.replace(/[^a-z0-9]/gi, '').toUpperCase();
                          setsequenceCode(result);
                          setAutoNumberingData({
                            ...autoNumberingData,
                            sequenceCode: result
                          });
                        }}
                      />
                    </Grid>
                  </Grid>
                )}
                {autoGenerated&&isAlphaNumeric && (
                  <Grid
                    item
                    container
                    direction="row"
                    spacing={6}
                    justify="flex-end"
                    alignItems="center">
                    <Grid item md={6} className="mx-auto">
                      <label style={{ marginTop: '15px' }} className=" mb-2">
                        Where to place the Alphanumeric part
                      </label>
                    </Grid>
                    <Grid item md={6} className="mx-auto">
                      <Radio
                        checked={isSuffix === 'Suffix'}
                        name="radio-isSuffix"
                        inputProps={{ 'aria-label': 'Suffix' }}
                        onChange={(event) => {
                          setisSuffix(event.target.value);
                          setAutoNumberingData({
                            ...autoNumberingData,
                            isSuffix:
                              event.target.value === 'Suffix' ? true : false,
                            alphaNumericPart: event.target.value
                          });
                        }}
                        value="Suffix"
                        label="Suffix"
                      />
                      <label>Suffix</label>
                      <Radio
                        checked={isSuffix === 'Prefix'}
                        onChange={(event) => {
                          setisSuffix(event.target.value);
                          setAutoNumberingData({
                            ...autoNumberingData,
                            isSuffix:
                              event.target.value === 'Prefix' ? false : true,
                            alphaNumericPart: event.target.value
                          });
                        }}
                        value="Prefix"
                        name="radio-isSuffix"
                        inputProps={{ 'aria-label': 'Prefix' }}
                        label="Prefix"
                      />
                      <label>Prefix</label>
                    </Grid>
                  </Grid>
                )}
                {autoGenerated && (
                  <Grid
                    item
                    container
                    direction="row"
                    spacing={6}
                    justify="flex-end"
                    alignItems="center">
                    <Grid item md={6} className="mx-auto">
                      <label style={{ marginTop: '15px' }} className=" mb-2">
                        Enter the last Assigned EmployeeID
                      </label>
                    </Grid>
                    <Grid item md={6} className="mx-auto">
                      <TextField
                        id="outlined-sequenceNumber"
                        placeholder="Sequence Number"
                        error={isSubmitted && (sequenceNumber ? false : true)}
                        helperText={
                          isSubmitted &&
                          (sequenceNumber ? '' : 'Field is Mandatory')
                        }
                        variant="outlined"
                        fullWidth
                        size="small"
                        value={sequenceNumber}
                        onChange={(event) => {
                          const result = event.target.value.replace(/[^0-9]/gi, '').toUpperCase();
                          setsequenceNumber(result);
                          setAutoNumberingData({
                            ...autoNumberingData,
                            sequenceNumber: result
                          });
                        }}
                      />
                    </Grid>
                  </Grid>
                )}
              </Grid>
            )}
          </Grid>
        </Grid>
      </Grid>
    </Card>
  );
};

export default CreateAutoNumberingSetupEmployeeID;
