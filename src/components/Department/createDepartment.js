import {
  Button,
  Card,
  Grid,
  Snackbar,
  TextField,
  MenuItem,
  Checkbox,
  CardContent,
  Table,
  InputAdornment,
  Dialog
} from '@material-ui/core';
import axios from 'axios';
import { BASEURL } from 'config/conf';
import { connect } from 'react-redux';
import React, { useState, useEffect } from 'react';
import { NavLink, useHistory } from 'react-router-dom';
import { useLocation } from 'react-router-dom';
import {
  KeyboardDatePicker,
  MuiPickersUtilsProvider
} from '@material-ui/pickers';

import 'date-fns';
import DateFnsUtils from '@date-io/date-fns';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import SearchTwoToneIcon from '@material-ui/icons/SearchTwoTone';
import { Autocomplete } from '@material-ui/lab';
import apicaller from 'helper/Apicaller';

const CreateDepartment = (props) => {
  const { selectedCompany } = props;
  const history = useHistory();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const id = queryParams.get('id') || null;
  const readOnly =
    queryParams.get('readOnly')?.toLowerCase() == 'true' || false;
  const edit = id ? true : false;
  const saveButtonLabel = edit ? 'Update Department' : 'Create Department';
  let [validDate, setValidDate] = useState(true);
  const [name, setName] = useState();
  const [checkAllEmployees, setCheckAllEmployees] = useState(false)
  const [asOfDate, setAsOfDate] = useState(new Date());
  const [costCenters, setCostCenters] = useState([]);
  const [locations, setLocations] = useState([]);
  const [departmentId, setDepartmentId] = useState();
  const [hasAutoGeneratedId, setHasAutoGeneratedId] = useState(true);
  const [_id, setId] = useState();
  const [createdAt, setCreatedAt] = useState();
  const [updatedAt, setUpdatedAt] = useState();
  const [status, setStatus] = useState(true);
  const [hodId, setHodId] = useState();
  const [hodIdIndex, setHodIdIndex] = useState();
  const [hodType, setHodType] = useState('None');
  const [hasHOD, setHasHOD] = useState(false);
  const [hasNextSequence, setHasNextSequence] = useState(false);
  const [hodName, setHodName] = useState();
  const [hodList, setHodList] = useState([]);
  const [belongsToCostCenter, setBelongsToCostCenter] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [allEmployees, setAllEmployees] = useState([]);
  const [allDesigntaion, setAllDesigntaion] = useState([]);
  const [allLocations, setAllLocation] = useState([]);
  let tempLocations = [];
  let tempEmployees = [];
  let tempDesignation = [];
  const [isExitControl, setIsExitControl] = useState(false);
  const [isProbationControl, setIsProbationControl] = useState(false);
  const [modal, setModal] = useState(false);
  const toggle3 = () => setModal(!modal);
  const currentPageType = "Department";
  const [blocking, setBlocking] = useState(false)
  const [state, setState] = useState({
    open: false,
    vertical: 'top',
    horizontal: 'right',
    toastrStyle: 'sucess',
    message: 'This is a toastr/snackbar notification!'
  });
  const { vertical, horizontal, open, toastrStyle, message } = state;
  const statusList = [
    { code: true, value: 'Active' },
    { code: false, value: 'Inactive' }
  ];

  const paddingTop = {
    paddingTop: '25px'
  }
  const hodTypeList = [
    { value: 'None' },
    { value: 'Employee' },
    { value: 'Designation' }
  ];

  useEffect(() => {
    getAllEmployees();
  }, []);
  const getAllEmployees = () => {
    apicaller('get', `${BASEURL}/employee/fetchEmployeeByUserId`)
      .then((res) => {
        if (res.status === 200) {
          console.log('res.data', res.data);
          for (const iterator of res.data) {
            iterator['name'] = iterator.firstName + ' ' + iterator.lastName;
          }
          tempEmployees = res.data;
          setAllEmployees(res.data, getAllDesignations());
        }
      })
      .catch((err) => {
        console.log('getEmployees err', err);
      });
  };

  const getAllDesignations = () => {
    apicaller(
      'get',
      `${BASEURL}/designation/fetchAll?isOneToOne=true&status=true`
    )
      .then((res) => {
        if (res.status === 200) {
          console.log('res.data', res.data);
          tempDesignation = res.data;
          if (id) {
            setAllDesigntaion(res.data, getDepartment());
          } else {
            setAllDesigntaion(res.data, getLocations());
          }
        }
      })
      .catch((err) => {
        console.log('getDesignation err', err);
      });
  };
  const getLocations = () => {
    apicaller('get', `${BASEURL}/location`)
      .then((res) => {
        if (res.status === 200) {
          console.log('res.data', res.data);
          const locationDetails = [];
          res.data.forEach((location) => {
            const tempLocation = {
              locationId: location.locationId,
              locationName: location.locationName,
              preferred: false
            };
            locationDetails.push(tempLocation);
          });
          setAllLocation(locationDetails, getNextDepartmentId());
        }
      })
      .catch((err) => {
        console.log('getLocation err', err);
      });
  };
  const getNextDepartmentId = () => {
    apicaller('post', `${BASEURL}/autoNumbering/getNextSequence`, {
      type: 'DEP'
    })
      .then((res) => {
        if (res.status === 200 && res.data) {
          setDepartmentId(res.data);
          setHasNextSequence(true);
          setAsOfDate(new Date());
          setStatus(true);
          setHodType('None');
          setHasHOD(false);
          handleAddCostCenterClick();
        }
      })
      .catch((err) => {
        console.log('get department err', err);
      });
  };
  const getDepartment = () => {
    apicaller('get', `${BASEURL}/department/byId/` + id)
      .then((res) => {
        if (res.status === 200) {
          console.log('res.data', res.data);
          setName(res.data.name);
          setAsOfDate(new Date(res.data.asOfDate)?.toString());
          setCostCenters(res.data.costCenters);
          setLocations(res.data.locations);
          setDepartmentId(res.data.id);
          setId(res.data._id);
          setCreatedAt(res.data.createdAt);
          setUpdatedAt(res.data.updatedAt);
          setHodId(res.data.hodId);
          setHodType(res.data.hodType);
          if (res.data.hodType.toLowerCase() == 'None'.toLowerCase()) {
            setHasHOD(false);
            setHodList([]);
          } else if (
            res.data.hodType.toLowerCase() == 'Employee'.toLowerCase()
          ) {
            setHasHOD(true);
            setHodList(tempEmployees);
            setHodIdIndex(
              tempEmployees.findIndex((hod) => hod.id === res.data.hodId)
            );
          } else if (
            res.data.hodType.toLowerCase() == 'Designation'.toLowerCase()
          ) {
            setHasHOD(true);
            setHodList(tempDesignation);
            setHodIdIndex(
              tempDesignation.findIndex((hod) => hod.id === res.data.hodId)
            );
          }
          setBelongsToCostCenter(res.data.belongsToCostCenter);
          setStatus(res.data.status);
          setHodName(getHodName(res.data.hodId));
          validateDate(res.data.asOfDate);
          setCheckAllEmployees(allLocations.length === res.data.locationDetails.length ? true : false)
          setAllLocation(JSON.parse(JSON.stringify(res.data.locationDetails)));
        }
      })
      .catch((err) => {
        console.log('get department err', err);
      });
  };
  const getHodName = (hodId) => {
    return hodList.find((hodDetail) => hodDetail.id === hodId)?.name;
  };
  const validateDate = (date) => {
    if (date && !isNaN(Date.parse(date))) {
      if (new Date(date) > new Date()) {
        setValidDate(false);
      } else {
        setValidDate(true);
      }
    } else {
      if (date) setValidDate(false);
      else setValidDate(true);
    }
  };
  const handleClick = (newState) => () => {
    setState({ open: true, ...newState });
  };
  const handleClose = () => {
    setState({ ...state, open: false });
  };
  const handleAddCostCenterClick = () => {
    const list = [...costCenters];
    list.push({
      id: '',
      name: ''
    });
    setCostCenters(list);
  };

  const handleRemoveCostCenterClick = (i) => {
    const list = [...costCenters];
    list.splice(i, 1);
    setCostCenters(list);
  };
  const handleCostCenter = (index) => (e) => {
    const newArray = costCenters.map((item, i) => {
      if (index === i) {
        return { ...item, [e.target.name]: e.target.value };
      } else {
        return item;
      }
    });
    setCostCenters(newArray);
  };
  const save = (e) => {
    //to do service call
    setIsSubmitted(true);
    let inputObj = {
      name: name,
      asOfDate: asOfDate,
      costCenters: costCenters,
      id: departmentId,
      hodId: hodId,
      locations: [],
      hodType: hodType,
      _id: _id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      status: status,
      belongsToCostCenter: belongsToCostCenter
    };
    allLocations.forEach((loc) => {
      if (loc.preferred) {
        inputObj.locations.push(loc.locationId);
      }
    });
    let isValid = false;
    isValid = new Date(asOfDate) > new Date(selectedCompany.registrationDate);
    if (isValid) {
      if (inputObj._id == null) {
        apicaller('post', `${BASEURL}/department/save`, inputObj)
          .then((res) => {
            if (res.status === 200) {
              console.log('res.data', res.data);
              setId(res.data[0]._id);
              setState({
                open: true,
                message: 'Department Created Sucessfully',
                toastrStyle: 'toastr-success',
                vertical: 'top',
                horizontal: 'right'
              });
              exitControlsData();
            }
          })
          .catch((err) => {
            setState({
              open: true,
              message: err.response.data,
              toastrStyle: 'toastr-warning',
              vertical: 'top',
              horizontal: 'right'
            });
            console.log('create department err', err);
          });
      } else {
        apicaller('put', `${BASEURL}/department/update`, inputObj)
          .then((res) => {
            if (res.status === 200) {
              console.log('res.data', res.data);
              setState({
                open: true,
                message: 'Department Details Updated Sucessfully',
                toastrStyle: 'toastr-success',
                vertical: 'top',
                horizontal: 'right'
              });
            }
          })
          .catch((err) => {
            setState({
              open: true,
              message: err.response.data,
              toastrStyle: 'toastr-warning',
              vertical: 'top',
              horizontal: 'right'
            });
            console.log('update department err', err);
          });
      }
    } else {
      setState({
        open: true,
        message: 'Errors exist in this form kindly resolve them before saving',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      });
    }
  };

  const exitControlsData = ()=>{
    apicaller('get', `${BASEURL}/separationControl/fetch?getSetupBy=true`)
      .then((res) => {
        if (res.status === 200) {
        if(res.data.toLowerCase()==currentPageType.toLowerCase()){
          setIsExitControl(true,probationSetupData(true))
          }
        else{
            probationSetupData(false)
          }
        }
      })
      .catch((err) => {
        console.log('get Exit control setup by err', err);
      });
  }
  const probationSetupData = (isExitControl)=>{
    apicaller('get', `${BASEURL}/probationSetup?getSetupBy=true`)
      .then((res) => {
        if (res.status === 200) {
        if(res.data.toLowerCase()==currentPageType.toLowerCase()){
          setIsProbationControl(true,toggle3())
          }
        else if(isExitControl){
            toggle3()
          }
        }
      })
      .catch((err) => {
        console.log('get probation setup by', err);
      });
  }
  return (
    <Card>
      <br />

      <Grid container spacing={0}>
        <Grid item xs={10} md={10} lg={7} xl={11} className="mx-auto">
          <h4 className="m-2 text-center">{_id?"Update "+currentPageType:"Create "+currentPageType}</h4>
          <Grid container>
            <Grid item container spacing={2} direction="row">
              <Grid item md={6} className="mx-auto">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  Department Id *
                </label>
                <TextField
                  id="outlined-id"
                  placeholder="Department Id"
                  variant="outlined"
                  fullWidth
                  size="small"
                  disabled={hasNextSequence || readOnly || edit || _id}
                  value={departmentId}
                  error={isSubmitted && !departmentId}
                  helperText={
                    isSubmitted && !departmentId
                      ? 'Department Id is Required'
                      : null
                  }
                  onChange={(event) => {
                    const result = event.target.value.replace(/[^a-z0-9]/gi, '');
                    setDepartmentId(result.toUpperCase());
                  }}
                />
              </Grid>
              <Grid item md={6} className="mx-auto">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  Department Name *
                </label>
                <TextField
                  id="outlined-name"
                  placeholder="Department Name"
                  variant="outlined"
                  fullWidth
                  size="small"
                  disabled={readOnly}
                  value={name}
                  error={isSubmitted && !name}
                  helperText={
                    isSubmitted && !name ? 'Department Name is Required' : null
                  }
                  onChange={(event) => {
                    setName(event.target.value);
                  }}
                />
              </Grid>
            </Grid>
            <Grid item container direction="row" spacing={2}>
              <Grid item md={6} className="mx-auto">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  As Of Date *
                </label>
                <MuiPickersUtilsProvider
                  utils={DateFnsUtils}
                  style={{ margin: '0%' }}>
                  <KeyboardDatePicker
                    style={{ margin: '0%' }}
                    inputVariant="outlined"
                    format="dd/MM/yyyy"
                    margin="normal"
                    id="date-picker-inline"
                    minDate={selectedCompany.registrationDate}
                    fullWidth
                    size="small"
                    disabled={readOnly}
                    value={asOfDate}
                    onChange={(event) => {
                      validateDate(event);
                      setAsOfDate(event);
                    }}
                    error={
                      isSubmitted &&
                      (!asOfDate ||
                        (asOfDate instanceof Date &&
                          new Date(asOfDate) <
                          new Date(selectedCompany.registrationDate)))
                    }
                    helperText={
                      isSubmitted &&
                      (!asOfDate
                        ? 'Date is Required'
                        : asOfDate instanceof Date &&
                          new Date(asOfDate) <
                          new Date(selectedCompany.registrationDate)
                          ? "As of Date Cannot be Less than Company's Registered Date"
                          : null)
                    }
                    KeyboardButtonProps={{
                      'aria-label': 'change date'
                    }}
                  />
                </MuiPickersUtilsProvider>
              </Grid>
              <Grid item md={6} className="mx-auto">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  Status
                </label>
                <TextField
                  variant="outlined"
                  fullWidth
                  id="outlined-status"
                  select
                  size="small"
                  disabled={readOnly}
                  name="status"
                  value={status}
                  onChange={(event) => {
                    setStatus(event.target.value);
                  }}>
                  {statusList.map((option) => (
                    <MenuItem key={option.code} value={option.code}>
                      {option.value}
                    </MenuItem>
                  ))}
                </TextField>
              </Grid>
            </Grid>
            <Grid item container direction="row" spacing={2}>
              <Grid item md={6} className="mx-auto">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  HOD Type
                </label>
              </Grid>
              <Grid item md={6} className="mx-auto">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  {hodType.toLowerCase() === 'Employee'.toLowerCase()
                    ? 'Select Employee'
                    : hodType.toLowerCase() === 'Designation'.toLowerCase()
                      ? 'Select Designation'
                      : null}
                </label>
              </Grid>
            </Grid>
            <Grid item container direction="row" spacing={2}>
              <Grid item md={6}>
                <TextField
                  variant="outlined"
                  fullWidth
                  id="outlined-hod-type"
                  select
                  size="small"
                  disabled={readOnly}
                  name="hodType"
                  value={hodType}
                  onChange={(event) => {
                    setHodType(event.target.value);
                    setHodId(null);
                    setHodName(null);
                    setHodIdIndex(null);
                    if (
                      event.target.value.toLowerCase() == 'None'.toLowerCase()
                    ) {
                      setHasHOD(false);
                      setHodList([]);
                    } else if (
                      event.target.value.toLowerCase() ==
                      'Employee'.toLowerCase()
                    ) {
                      setHasHOD(true);
                      setHodList(allEmployees);
                    } else if (
                      event.target.value.toLowerCase() ==
                      'Designation'.toLowerCase()
                    ) {
                      setHasHOD(true);
                      setHodList(allDesigntaion);
                    }
                  }}>
                  {hodTypeList.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.value}
                    </MenuItem>
                  ))}
                </TextField>
              </Grid>
              {hodType.toLowerCase() != 'None'.toLowerCase() && (
                <Grid item md={6} className="mx-auto">
                  <Autocomplete
                    id="combo-box-demo"
                    options={hodList}
                    value={
                      hodIdIndex != null ? hodList[hodIdIndex] || '' : null
                    }
                    disabled={readOnly || !hasHOD}
                    getOptionLabel={(option) => option.name}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        variant="outlined"
                        fullWidth
                        disabled={readOnly || !hasHOD}
                        size="small"
                        name="hodName"
                        value={
                          hodIdIndex != null ? hodList[hodIdIndex] || '' : null
                        }
                      />
                    )}
                    onChange={(event, value) => {
                      const index = hodList.findIndex(
                        (hod) => hod._id === value?._id
                      );
                      setHodIdIndex(index);
                      setHodId(hodList[index].id);
                      setHodName(hodList[index].name);
                    }}
                  />
                </Grid>
              )}
            </Grid>
            <Grid
              item
              container
              direction="row"
              spacing={2}
              style={{ paddingTop: '1%' }}>
              <Grid item md={6}>
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  Belongs To Cost-Center{' '}
                </label>
                <Checkbox
                  checked={belongsToCostCenter}
                  color="primary"
                  id="checkbox-hascost-center"
                  className="align-self-start"
                  name="preferred"
                  disabled={readOnly}
                  value={belongsToCostCenter}
                  onChange={(event) => {
                    setBelongsToCostCenter(event.target.checked);
                  }}
                />
              </Grid>
              {belongsToCostCenter && (
                <Grid item md={6} className="mx-auto">
                  <Button
                    style={{ paddingTop: '1%' }}
                    disabled={readOnly}
                    onClick={handleAddCostCenterClick}
                    className="float-right btn-primary mb-2">
                    <FontAwesomeIcon
                      icon={['fas', 'plus']}
                      className="font-size-sm"
                    />{' '}
                    {' Add Cost Center'}
                  </Button>
                </Grid>
              )}
            </Grid>
            {belongsToCostCenter && (
              // <CardContent>
              <>
                <Grid item container direction="row" spacing={2}></Grid>
                <Grid item container direction="row" spacing={2}>
                  <Grid item md={12} className="mx-auto">
                    <div className='d-flex flex-column flex-md-row  justify-content-between table-responsive-md'>
                      <Table className="table table-hover table-striped text-nowrap mb-0">
                        <thead className="thead-light">
                          <tr>
                            <th className="text-center">Cost Center Id</th>
                            <th className="text-center">Cost Center Name</th>
                            <th
                              style={{ width: '20%' }}
                              className="text-center">
                              Actions
                            </th>
                          </tr>
                        </thead>
                        <tbody>
                          {costCenters?.map((item, idx) => (
                            <tr>
                              <td className="text-center">
                                <div>
                                  <TextField
                                    variant="outlined"
                                    fullWidth
                                    // id={`outlined-costcenterId${idx}`}
                                    size="small"
                                    name="id"
                                    disabled={readOnly}
                                    value={item.id}
                                    onChange={handleCostCenter(
                                      idx
                                    )}></TextField>
                                </div>
                              </td>
                              <td className="text-center">
                                <div>
                                  <TextField
                                    variant="outlined"
                                    // id={`outlined-costcentername${idx}`}
                                    size="small"
                                    fullWidth
                                    name="name"
                                    disabled={readOnly}
                                    value={item.name}
                                    onChange={handleCostCenter(idx)}
                                  />
                                </div>
                              </td>
                              <td className="text-center">
                                <div>
                                  <Button
                                    disabled={readOnly}
                                    onClick={() =>
                                      handleRemoveCostCenterClick(idx)
                                    }
                                    className="btn-neutral-danger mx-1 shadow-none d-30 border-0 p-0 d-inline-flex align-items-center justify-content-center">
                                    <FontAwesomeIcon
                                      icon={['fas', 'times']}
                                      className="font-size-sm"
                                    />
                                  </Button>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </Table>
                    </div>
                  </Grid>
                </Grid>
                <div className="divider" />
                <div className="divider" />
              </>
              // </CardContent>
            )}
            {/* </Grid> */}
           
            <Grid item container direction="row" spacing={2}>
              <Grid item md={12} className="mx-auto ">
                <label style={{ marginTop: '15px' }} className=" mb-2">
                  Location
                </label>
                <div className='d-flex flex-column flex-md-row table-responsive-md'>
                  <Table className="table table-hover table-striped text-nowrap mb-0">
                    <thead className="thead-light">
                      <tr>
                        <th className="text-center">Location Id</th>
                        <th className="text-center">Location Name</th>
                        <th style={Object.assign({ width: '5px' }, paddingTop)}>
                          <Checkbox
                            id='outlined-AllLocations'
                            color='primary'
                            placeholder='AllLocations'
                            variant='outlined'
                            size='small'
                            // checked={checkAllEmployees}
                            value={checkAllEmployees}
                            onChange={event => {
                              setCheckAllEmployees(event.target.checked)
                              const tempAllLocations = JSON.parse(JSON.stringify(allLocations))
                              tempAllLocations.forEach(loc => {
                                loc.preferred = event.target.checked
                              })
                              setAllLocation(tempAllLocations)
                            }}></Checkbox>
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {allLocations?.map((item, idx) => (
                        <tr>
                          <td className="text-center">
                            <div>
                              <TextField
                                variant="outlined"
                                fullWidth
                                id={`outlined-locationid${idx}`}
                                size="small"
                                name="id"
                                disabled={true}
                                value={item?.locationId}
                              />
                            </div>
                          </td>
                          <td className="text-center">
                            <div>
                              <TextField
                                variant="outlined"
                                size="small"
                                fullWidth
                                id={`outlined-locationname${idx}`}
                                name="name"
                                disabled={true}
                                value={item?.locationName}
                              />
                            </div>
                          </td>
                          <td className="text-center">
                            <Checkbox
                              checked={item.preferred}
                              color="primary"
                              id={`phoneCheckbox${idx}`}
                              disabled={readOnly}
                              className="align-self-start"
                              name="preferred"
                              value={item.preferred}
                              onChange={(event) => {
                                const tempLoc = allLocations.slice(0);
                                tempLoc[idx].preferred = event.target.checked;
                                setAllLocation(tempLoc);
                              }}
                            />
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </Table>
                </div>
                <div className="divider" />
                <div className="divider" />
              </Grid>
            </Grid>
          </Grid>
        </Grid>
      </Grid>
      <br />
      <div className="float-right" style={{ marginRight: '2.5%' }}>
        <Button
          className="btn-primary mb-2 m-2"
          component={NavLink}
          to="./department">
          Cancel
        </Button>
        <Button
          disabled={!validDate}
          onClick={(e) => save(e)}
          className="btn-primary mb-2 mr-3 m-2">
          {_id?"Update "+currentPageType:"Create "+currentPageType}
        </Button>
        <Snackbar
          anchorOrigin={{ vertical, horizontal }}
          key={`${vertical},${horizontal}`}
          open={open}
          classes={{ root: toastrStyle }}
          onClose={handleClose}
          message={message}
          autoHideDuration={2000}
        />
      </div>
      <Dialog
        open={modal}
        onClose={toggle3}
        classes={{ paper: 'shadow-lg rounded' }}>
        <div className="p-5">
        {isExitControl&&<p className="text-center">
            {"Exit Control Setup is based on "+currentPageType+"."}
            <a style={{ color: 'blue' }} href={"./exitControl"}>
              Update this Setup
            </a>
          </p>}
          <br/>
          {isProbationControl&&
            <p className="text-center">
              {"Probation Setup is based on "+currentPageType+"."}
              <a style={{ color: 'blue' }} href={"./probationPeriodSetup"}>
                Update this Setup
              </a>
            </p>
          }
          <div className="pt-4 d-flex justify-content-center">
            <Button
              onClick={toggle3}
              className="btn-neutral-primary btn-pill mx-1">
              <span className="btn-wrapper--label">OK</span>
            </Button>
          </div>
        </div>
      </Dialog>
      <br />
      <br />
      <br />
    </Card>
  );
};

const mapStateToProps = (state) => ({
  selectedCompany: state.Auth.selectedCompany
});

const mapDispatchToProps = (dispatch) => ({});

export default connect(mapStateToProps, mapDispatchToProps)(CreateDepartment);
