import {
  Box,
  Button,
  Card,
  Checkbox,
  Grid,
  Container,
  MenuItem,
  Table,
  CardContent,
  MenuList,
  TextField,
  Snackbar,
  Switch,
  Dialog
} from '@material-ui/core'
import { BASEURL } from 'config/conf'
import React, { useState, useEffect } from 'react'
import { NavLink } from 'react-router-dom'
import Autocomplete from '@material-ui/lab/Autocomplete'
import { useHistory, useLocation } from 'react-router-dom'
import { ClimbingBoxLoader } from 'react-spinners'
import BlockUi from 'react-block-ui'
import { useDropzone } from 'react-dropzone'
import CloseTwoToneIcon from '@material-ui/icons/CloseTwoTone'
import PublishTwoToneIcon from '@material-ui/icons/PublishTwoTone'
import AccountCircleTwoToneIcon from '@material-ui/icons/AccountCircleTwoTone'
import CheckIcon from '@material-ui/icons/Check'
import {
  MuiPickersUtilsProvider,
  KeyboardDatePicker
} from '@material-ui/pickers'
import 'date-fns'
import DateFnsUtils from '@date-io/date-fns'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { setIn } from 'formik'
import { NaturePeopleOutlined, SettingsBackupRestore } from '@material-ui/icons'
import { add } from 'date-fns'
import apicaller from 'helper/Apicaller'
import { connect } from 'react-redux'
import empty_profile_picture from '../../assets/images/avatars/empty_profile_picture.jpg'
import { Alert } from '@material-ui/lab'

const HireProcess = props => {
  const urlLocation = useLocation()
  const queryParams = new URLSearchParams(urlLocation.search)
  const id = queryParams.get('id') || null
  const edit = id ? true : false
  const saveButtonLabel = edit ? 'Update' : 'Save'

  const { countriesMasterData } = props
  const history = useHistory()
  const { selectedCompany } = props
  const [state, setState] = useState({
    open1: false,
    vertical: 'top',
    horizontal: 'right',
    toastrStyle: 'sucess',
    message: 'This is a toastr/snackbar notification!'
  })
  const { vertical, horizontal, open1, toastrStyle, message } = state
  const [files, setFiles] = useState([])
  const [profileImg, setProfileImg] = useState(empty_profile_picture)
  const [profilePicPath, setProfilePicPath] = useState([])
  const [profilePicName, setProfilePicName] = useState([])
  const [employeeObject, setEmployeeObject] = useState()
  const [blocking, setBlocking] = useState(false)
  const [isAutoGenerated, setAutoGenerated] = useState(true)
  const [employeeID, setEmployeeId] = useState()
  const [isSubmitted, setIsSubmitted] = useState()
  const [jobType, setJobType] = useState('')
  const [jobStatus, setJobStatus] = useState('')
  const [firstName, setFirstName] = useState()
  const [middleName, setMiddleName] = useState()
  const [lastName, setLastName] = useState()
  const [fatherOrHusband, setFatherHusband] = useState('')
  const [fatherHusbandName, setFatherHusbandName] = useState()
  const [DOB, setDOB] = useState(null)
  const [age, setAge] = useState('')
  const [bloodGroup, setBloodGroup] = useState('')
  const [celebratesOn, setCelebratesOn] = useState(true)
  const [celebrationDate, setCelebratesOnDate] = useState(null)
  const [birthState, setAddState] = useState()
  const [country, setCountry] = useState()
  const [POB, setPOB] = useState()
  const [nationality, setNationality] = useState()
  const [gender, setGender] = useState('')
  const [maritalStatus, setMaritalStatus] = useState('')
  const [hireDate, setHireDate] = useState(null)
  const [hireReason, setHireReason] = useState()
  const [empDep, setEmpDepartment] = useState()
  const [empLoc, setEmpLocation] = useState()
  const [empDes, setEmpDesignation] = useState()
  const [managerUUID, setManagerUUID] = useState()
  const [formURL, setFormURL] = useState('/hireProcessView')
  const [allEmployees, setAllEmployees] = useState([])
  const [allDepartments, setAllDepartment] = useState([])
  const [allDesigntaion, setAllDesigntaion] = useState([])
  const [allLocations, setAllLocation] = useState([])
  const [allFetchedLocations, setAllFetchedLocations] = useState([])
  const [filePath, setFilePath] = useState()
  const [imgObj, setFileObj] = useState()
  const [countries, setCountries] = useState([])
  const [countryIndex, setCountryIndex] = useState()
  const [allStates, setAllStates] = useState([])
  const [stateIndex, setStateIndex] = useState()
 
  let tempCountries = []
  let tempStates = []
  const [managerIndex, setManagerIndex] = useState(null)
  const [designationIndex, setDesigIndex] = useState(null)
  const [departIndex, setDepartIndex] = useState(null)
  const [loctnIndex, setLoctnIndex] = useState(null)
  const [reasonIndex, setReasonIndex] = useState(null)
  const [probationConfirmationDate, setProbationConfirmationDate] = useState(null)
  const [allReasons, setAllReasons] = useState([])
  const [setupBy, setSetUpBy] = useState('')
  const [probationRequiredError, setProbationRequiredError] = useState()
  const [hireDateError, setHireDateError] = useState()
  const isLocationRequired = isSubmitted && (!empLoc || empLoc === '');
  const isDepartmentRequired = isSubmitted && (!empDep || empDep === '');
  const isDesignationRequired = isSubmitted && (!empDes || empDes === '');
  const isJobTypeRequired = isSubmitted && (!jobType || jobType === '');
  const getObjByValue = (arr, value, matchWith) => {
    if (arr.length > 0) {
      return value ? arr.find(x => x[matchWith] == value) : {}
    }
  }

  const [deleteModal, setDeleteModal] = useState(false)
  const [editModal, setEditModal] = useState(false)

  const deleteModaltoggle = () => setDeleteModal(!deleteModal)
  const editModalToggle = () => setEditModal(!editModal)

  const jobTypes = [
    {
      value: 'Consultant',
      label: 'Consultant'
    },
    {
      value: 'Contractor',
      label: 'Contractor'
    },
    {
      value: 'Employee',
      label: 'Employee'
    },
    {
      value: 'Intern',
      label: 'Intern'
    },
    {
      value: 'Retainer',
      label: 'Retainer'
    }
  ]

  const jobStatusList = [
    {
      value: 'Confirmed',
      label: 'Confirmed'
    },
    {
      value: 'Contract',
      label: 'Contract'
    },
    {
      value: 'Probation',
      label: 'Probation'
    },
    {
      value: 'Training',
      label: 'Training'
    }
  ]

  const fatherHusbandType = [
    {
      value: 'Father',
      label: 'Father'
    },
    {
      value: 'Husband',
      label: 'Husband'
    }
  ]

  const states = [
    { value: 'California ' },
    { value: 'Florida ' },
    { value: 'Georgia ' },
    { value: 'South Carolina' },
    { value: 'Kansas' },
    { value: 'Hyderabad' },
    { value: 'Banglore' },
    { value: 'Delhi' },
    { value: 'Mumbai' },
    { value: 'New York' },
    { value: 'Georgia' }
  ]

  const genders = [
    {
      value: 'Male',
      label: 'Male'
    },
    {
      value: 'Female',
      label: 'Female'
    },
    {
      value: 'Transgender',
      label: 'Transgender'
    },
    {
      value: 'Unknown',
      label: 'Unknown'
    }
  ]

  const maritalStatusList = [
    {
      value: 'Married',
      label: 'Married'
    },
    {
      value: 'Divorced',
      label: 'Divorced'
    },
    {
      value: 'Single',
      label: 'Single'
    },
    {
      value: 'Widowed',
      label: 'Widowed'
    },
    {
      value: 'Unknown',
      label: 'Unknown'
    }
  ]

  const bloodGroupList = [
    {
      value: 'A+ve',
      label: 'A+ve'
    },
    {
      value: 'A-ve',
      label: 'A-ve'
    },
    {
      value: 'B+ve',
      label: 'B+ve'
    },
    {
      value: 'B-ve',
      label: 'B-ve'
    },
    {
      value: 'AB+ve',
      label: 'AB+ve,'
    },
    {
      value: 'AB-ve',
      label: 'AB-ve'
    },
    {
      value: 'O+ve',
      label: 'O+ve'
    },
    {
      value: 'O-ve',
      label: 'O-ve'
    }
  ]

  const {
    isDragActive,
    isDragAccept,
    isDragReject,
    open,
    getRootProps,
    getInputProps
  } = useDropzone({
    noClick: true,
    noKeyboard: true,
    multiple: false,
    accept: 'image/*',
    onDrop: acceptedFiles => {
      setFiles(
        acceptedFiles.map(file =>
          Object.assign(file, {
            preview: URL.createObjectURL(file)
          })
        )
      )
    }
  })

  const thumbs = files.map(file => (
    <div
      key={file.name}
      className='rounded avatar-image overflow-hidden d-140 bg-neutral-success text-center font-weight-bold text-success d-flex justify-content-center align-items-center'>
      <img
        className='img-fluid img-fit-container rounded-sm'
        src={file.preview}
        alt='...'
      />
    </div>
  ))

  const checkIfAutonumbering = () => {
    apicaller('post', `${BASEURL}/autoNumbering/getNextSequence`, {
      type: 'EMP'
    }).then(res => {
      if (res.status == 200 && res.data?.length > 0) {
        setEmployeeId(res.data)
        setAutoGenerated(true)
      } else {
        setAutoGenerated(false)
      }
    })
  }

  useEffect(() => {
    tempCountries = countriesMasterData
    setCountries(tempCountries)
    if (id) {
      getEmployeeDetails()
    } else {
      getActions()
      checkIfAutonumbering()
      getEmployees()
      getDepartments()
      getDesignation()
      getLocation()
    }
  }, [])

  useEffect(() => {
    if (loctnIndex !== null && empLoc !== undefined && setupBy === "location" && jobStatus === 'Probation') {
      setProbationRequiredError(null);
      if (hireDate !== null) {
        handleProbationSetup();
      }
    }
    if (departIndex !== null && empDep !== undefined && setupBy == "department" && jobStatus == 'Probation') {
      setProbationRequiredError(null);
      if (hireDate !== null) {
        handleProbationSetup();
      }
    }
    if (designationIndex !== null && empDes !== undefined && setupBy == "designation" && jobStatus == 'Probation') {
      setProbationRequiredError(null);
      if (hireDate !== null) {
        handleProbationSetup();
      }
    }
    if (jobType !== undefined && setupBy == "jobType"  && jobStatus == 'Probation') {
      setProbationRequiredError(null);
      if (hireDate !== null) {
        handleProbationSetup();
      }
    }
    if (hireDate !== null && (setupBy == "department" || setupBy == "designation" || setupBy == "location" || setupBy == "jobType") && jobStatus == 'Probation') {
      setHireDateError(null);
      if (!probationRequiredError) {
        handleProbationSetup();
      }
    }
  }, [loctnIndex, empLoc, departIndex, empDep, designationIndex, empDes, jobType, hireDate, jobStatus])

  const getEmployeeDetails = () => {
    setBlocking(true)
    apicaller('get', `${BASEURL}/employee/fetchEmployeeByUserId?id=` + id)
      .then(res => {
        if (res.status === 200) {
          if (res.data.length > 0) {
            setBlocking(false)

            setEmployeeObject(res.data[0])

            setEmployeeId(res.data[0].id)

            const foundTypeObj = getObjByValue(
              jobTypes,
              res.data[0].jobType,
              'value'
            )
            setJobType(foundTypeObj.value)

            const foundStatusObj = getObjByValue(
              jobStatusList,
              res.data[0].jobStatus,
              'value'
            )
            setJobStatus(foundStatusObj.value)
            setProbationConfirmationDate(res.data[0].probationDate)
            setFirstName(res.data[0].firstName)
            setMiddleName(res.data[0].middleName)
            setLastName(res.data[0].lastName)
            const foundFatherHusTypeObj = getObjByValue(
              fatherHusbandType,
              res.data[0].fatherOrHusband,
              'value'
            )
            setFatherHusband(foundFatherHusTypeObj.value)

            setFatherHusbandName(res.data[0].fatherOrHusbandName)
            setDOB(res.data[0].dob)
            setAge(res.data[0].age)

            const bloodGroupObj = getObjByValue(
              bloodGroupList,
              res.data[0].bloodGroup,
              'value'
            )
            setBloodGroup(bloodGroupObj.value)

 
            setCelebratesOnDate(res.data[0].celebratesOn)

            if (res.data[0].celebratesOn == res.data[0].dob) {
              setCelebratesOn(true)
            } else {
              setCelebratesOn(false)
            }

            const index = countriesMasterData.findIndex(
              country => country.name === res.data[0].birthCountry
            )
            if (index != -1) {
              setCountryIndex(index)
              setCountry(countriesMasterData[index].name)
              setAllStates(countriesMasterData[index].states)
              setAddState(null)
              setStateIndex(null)
            } 
            
            if(index != -1 && res.data[0].birthState) {
              const stateIndex = countriesMasterData[index].states.findIndex(
                state => state === res.data[0].birthState
              )
              if (stateIndex != -1) {
                setStateIndex(stateIndex)
                setAddState(countriesMasterData[index].states[stateIndex])
              }
            }

            setPOB(res.data[0].birthPlace)
            setNationality(res.data[0].nationality)
            const genderObj = getObjByValue(
              genders,
              res.data[0].gender,
              'value'
            )
            setGender(genderObj.value)

            const maritalStatusObj = getObjByValue(
              maritalStatusList,
              res.data[0].maritalStatus,
              'value'
            )
            setMaritalStatus(maritalStatusObj.value)

            setHireDate(res.data[0].hireDate)

            getEmployees(res.data[0].managerUUID)

            getDepartments(res.data[0].department)

            getDesignation(res.data[0].designation)

            getLocation(res.data[0].location)

            getActions(res.data[0].reasonForHire)
            setProfilePicName(res.data[0].file?.fileName)
            setProfilePicPath(res.data[0].file?.filePath)

            checkIfProfileImg(res.data[0])

            setFileObj(res.data[0].file)
          } else {
            setState({
              openToast: true,
              message: 'Employee not found',
              toastrStyle: 'toastr-warning',
              vertical: 'top',
              horizontal: 'right'
            })
          }
        }
      })
      .catch(err => {
        setBlocking(false)
        console.log('get employee err', err)
      })
  }

  const checkIfProfileImg = employeetionData => {
    if (employeetionData?.file) {
      setBlocking(true)
      let path =
        employeetionData?.file?.filePath +
        '/' +
        employeetionData?.file?.fileName
      apicaller('get', `${BASEURL}/storage?path=` + path)
        .then(res => {
          if (res.status === 200) {
            setBlocking(false)
            if (res.data) {
              let baseStr64 = res.data
              let imgSrc64 = 'data:image/jpg;base64,' + baseStr64
              // Set the source of the Image to the base64 string
              setProfileImg(imgSrc64)
            }
          }
        })
        .catch(err => {
          setBlocking(false)
          console.log('updateSession err', err)
        })
    }
  }

  const getEmployees = manageruuid => {
    apicaller('get', `${BASEURL}/employee/get-all-employees`)
      .then(res => {
        if (res.status === 200) {
          console.log('res.data', res.data)
          for (const iterator of res.data) {
            iterator['nameWithId'] =
              iterator.employeeName + '-' + iterator.employeeID
          }
          setAllEmployees(res.data)

          if (manageruuid) {
            let index = res.data.findIndex(emp => emp.uuid === manageruuid)
            if (index > -1) {
              setManagerIndex(index)
              setManagerUUID(res.data[index].uuid)
            }
          }
        }
      })
      .catch(err => {
        console.log('getEmployees err', err)
      })
  }

  const getDepartments = id => {
    apicaller('get', `${BASEURL}/department/fetchAll`)
      .then(res => {
        if (res.status === 200) {
          console.log('res.data', res.data)
          setAllDepartment(res.data)

          if (id) {
            let index = res.data.findIndex(dep => dep.id === id)
            if (index > -1) {
              setDepartIndex(index)
              setEmpDepartment(res.data[index].id)
            }
          }
        }
      })
      .catch(err => {
        console.log('getDepartments err', err)
      })
  }

  const getDesignation = id => {
    apicaller('get', `${BASEURL}/designation/fetchAll`)
      .then(res => {
        if (res.status === 200) {
          console.log('res.data', res.data)
          setAllDesigntaion(res.data)

          if (id) {
            let index = res.data.findIndex(desig => desig.id === id)
            if (index > -1) {
              setDesigIndex(index)
              setEmpDesignation(res.data[index].id)
            }
          }
        }
      })
      .catch(err => {
        console.log('getDesignation err', err)
      })
  }

  const getLocation = id => {
    apicaller('get', `${BASEURL}/location`)
      .then(res => {
        if (res.status === 200) {
          console.log('res.data', res.data)
          setAllLocation(res.data)
          setAllFetchedLocations(res.data)

          if (id) {
            let index = res.data.findIndex(loc => loc.locationId === id)
            if (index > -1) {
              setLoctnIndex(index)
              setEmpLocation(res.data[index].locationId)
            }
          }
        }
      })
      .catch(err => {
        console.log('getDesignation err', err)
      })
  }

  const getActions = id => {
    apicaller('get', `${BASEURL}/action/find`)
      .then(res => {
        if (res.status === 200) {
          console.log('res.data', res.data)
          const primaryObject = res.data.find(
            obj => obj.actionName.toUpperCase() === 'HIRE'
          )

          if (primaryObject) {
            apicaller(
              'get',
              `${BASEURL}/action/byActionCode/?actionCode=${primaryObject.actionCode}`
            )
              .then(res => {
                if (res.status === 200) {
                  if (res.data[0]?.reasons) {
                    console.log('res.data', res.data[0]?.reasons)
                    setAllReasons(res.data[0]?.reasons)

                    if (id) {
                      let index = res.data[0]?.reasons.findIndex(
                        rsn => rsn.reasonCode === id
                      )
                      if (index > -1) {
                        setReasonIndex(index)
                        setHireReason(res.data[0]?.reasons[index].reasonCode)
                      }
                    }
                  }
                }
              })
              .catch(err => {
                console.log('FEtchall Action Reasons Err', err)
              })
          }
        }
      })
      .catch(err => {
        console.log('FEtchall Action Reasons Err', err)
      })
  }
  
  // Function to calculate age based on current date
  const calculateAge = event => {
    const currentDate = new Date()
    const currentYear = currentDate.getFullYear()
    const birthYear = new Date(event).getFullYear()
    let age = currentYear - birthYear
    if (!isNaN(age)) setAge(age)
  }

  const save = event => {
    setIsSubmitted(true)
    if (!isAutoGenerated && (!employeeID || employeeID === '')) {
      setState({
        open1: true,
        message: 'Mandatory fields are Required',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      })
      return
    }

    if (DOB == null) {
      setState({
        open1: true,
        message: 'Mandatory fields are Required',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      })
      return
    }

    if (new Date(DOB) > new Date()) {
      setState({
        open1: true,
        message: 'DOB cannot be future Date',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      })
      return    
    }

    if (
      celebratesOn == false &&
      (!celebrationDate || celebrationDate == null)
    ) {
      setState({
        open1: true,
        message: 'Mandatory fields are Required',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      })
      return
    }
    if (new Date(celebratesOn) > new Date()) {
      setState({
        open1: true,
        message: 'CelebratesOn cannot be future Date',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      })
      return    
    }


    if (
      jobType &&
      jobType !== '' &&
      jobStatus &&
      jobStatus !== '' &&
      firstName &&
      firstName !== '' &&
      lastName &&
      lastName !== '' &&
      fatherHusbandName &&
      fatherHusbandName !== '' &&
      gender &&
      gender !== '' &&
      maritalStatus &&
      maritalStatus !== '' &&
      hireDate &&
      hireDate !== null &&
      hireReason &&
      hireReason !== '' &&
      empDep &&
      empDep !== '' &&
      empLoc &&
      empLoc !== '' &&
      empDes &&
      empDes !== ''
    ) {
      let inputObj = {
        
        firstName: firstName,
        lastName: lastName,
        middleName: middleName,
        jobType: jobType,
        jobStatus: jobStatus,
        fatherOrHusband: fatherOrHusband,
        fatherOrHusbandName: fatherHusbandName,
        dob: DOB,
        bloodGroup: bloodGroup,
        celebratesOn: celebratesOn ? DOB : celebrationDate,
        birthCountry: country,
        birthState: birthState,
        birthPlace: POB,
        nationality: nationality,
        gender: gender,
        maritalStatus: maritalStatus,
        hireDate: hireDate,
        reasonForHire: hireReason,
        department: empDep,
        location: empLoc,
        designation: empDes,
        managerUUID: managerUUID,
        age: age,
        probationDate: probationConfirmationDate
      }

      if (files[0]) {
        setBlocking(true)
        let path = selectedCompany.companyName + '/profile'
        let formData = new FormData()
        formData.append('file', files[0])
        formData.append('documentType', 'profile')

        if (edit) {
          inputObj['file'] = imgObj
          inputObj['uuid'] = employeeObject.uuid
          saveObj(inputObj)
        } else {
          inputObj['id'] = employeeID
          apicaller('post', `${BASEURL}/storage/uploadFile`, formData)
            .then(res => {
              if (res.status === 200) {
                console.log('res.data', res.data)
                inputObj['file'] = res.data
                let path = res.data.filePath + '/' + res.data.fileName
                setFilePath(path)
                saveObj(inputObj)
              }
            })
            .catch(err => {
              setBlocking(false)
              console.log('Iamge Upload err', err)
              setState({
                open: true,
                message: 'err',
                toastrStyle: 'toastr-warning',
                vertical: 'top',
                horizontal: 'right'
              })
            })
        }
      } else {
        if (edit) {
          if (imgObj) {
            inputObj['file'] = imgObj
          } else {
            inputObj['file'] = null
          }
          inputObj['uuid'] = employeeObject.uuid
          saveObj(inputObj)
        } else {
          inputObj['id'] = employeeID
          saveObj(inputObj)
        }
      }
    } else {
      setState({
        open1: true,
        message: 'Mandatory fields are Required',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      })
    }
  }

  const saveObj = inputObj => {
    setBlocking(true)
    let query
    let msg
    if (edit) {
      query = apicaller('put', `${BASEURL}/employee/update?id=updateHire`, inputObj)
      msg = 'Employee Updated Successfully'
    } else {
      query = apicaller('post', `${BASEURL}/employee/save`, inputObj)
      msg = 'Employee Created Successfully'
    }
    query
      .then(res => {
        setBlocking(false)
        if (res.status === 200) {
          console.log('res.data', res.data)
          setState({
            open1: true,
            message: msg,
            toastrStyle: 'toastr-success',
            vertical: 'top',
            horizontal: 'right'
          })
          if (edit) {
            history.push(formURL + '?id=' + id)
          } else {
            history.push(formURL + '?id=' + res.data[0].id)
          }
        }
      })
      .catch(err => {
        setBlocking(false)
        setState({
          open: true,
          message: 'Error Occured while creating Employee Details',
          toastrStyle: 'toastr-warning',
          vertical: 'top',
          horizontal: 'right'
        })
        console.log('create employee err', err)
      })
  }

  const handleClose = () => {
    setState({ ...state, open1: false })
  }

  const handleDeleteID = () => {
    setDeleteModal(false)
    updateProfilePic()
    apicaller(
      'delete',
      `${BASEURL}/storage?path=` + profilePicPath + '/' + profilePicName
    )
      .then(res => {
        if (res.status === 200) {
          setFiles([])
          setFileObj()
          setState({
            openToast: true,
            message: 'Deleted Successfully',
            toastrStyle: 'toastr-success',
            vertical: 'top',
            horizontal: 'right'
          })
        }
      })
      .catch(err => {
        console.log('err', err)
        if (err?.response?.data) {
          setState({
            openToast: true,
            message: err.response.data,
            toastrStyle: 'toastr-warning',
            vertical: 'top',
            horizontal: 'right'
          })
        }
      })
  }

  const handleProbationSetup = () => {
    setBlocking(true)
    apicaller('get', `${BASEURL}/probationSetup?getSetupBy=true`)
      .then(res => {
        if (res.status === 200) {
          setBlocking(false)
          setSetUpBy(res.data)
          if (res.data == "department" || res.data == "designation" || res.data == "location" || res.data == "jobType") {
            if (hireDate === null && !hireDate) {
              setHireDateError('Please Select HireDate to Get Probation Date')
            }
          }
          if (res.data == "department") {
            if (departIndex === null && !empDep) {
              setProbationRequiredError('Please Select Department to Get Probation Date')
            } else {
              getProbationDate(empDep)
            }
          }
          else if (res.data == "designation") {
            if (designationIndex === null && !empDes) {
              setProbationRequiredError('Please Select Designation to Get Probation Date')
            } else {
              getProbationDate(empDes)
            }
          }
          else if (res.data == "location") {
            if (loctnIndex === null && !empLoc) {
              setProbationRequiredError('Please Select Location to Get Probation Date')
            } else {
              getProbationDate(empLoc)
            }
          }
          else if (res.data == "jobType") {
            if (jobType === null && !jobType) {
              setProbationRequiredError('Please Select Job Type to Get Probation Date')
            } else {
              getProbationDate(empDep)
            }
          }
        }
      })
      .catch((err) => {
        setBlocking(false)
        console.log('setup err', err);
        setState({
          openToast: true,
          message: 'err',
          toastrStyle: 'toastr-warning',
          vertical: 'top',
          horizontal: 'right'
        });
      });
  }

  const getProbationDate = (probationPeriodFor) => {
    setBlocking(true)
    apicaller('get', `${BASEURL}/probationSetup/date?probationPeriodFor=${probationPeriodFor}&hireDate=${hireDate}`)
      .then(res => {
        if (res.status === 200) {
          setProbationConfirmationDate(new Date(res.data))
          setBlocking(false)
        }
      })
      .catch((err) => {
        setBlocking(false)
        console.log('Probation Confirmation date err', err);
        setState({
          openToast: true,
          message: 'err',
          toastrStyle: 'toastr-warning',
          vertical: 'top',
          horizontal: 'right'
        });
      });
  }
  const updateProfilePic = () => {
    let inputObj = { ...employeeObject };
    if (files[0]) {
      let path = selectedCompany.companyName + '/profile';
      let formData = new FormData();
      formData.append('file', files[0]);
      formData.append('documentType', 'profile');

      apicaller('post', `${BASEURL}/storage/uploadFile`, formData)
        .then((res) => {
          if (res.status === 200) {
            inputObj['file'] = res.data;
            setFileObj(res.data)
            let path = res.data.filePath + '/' + res.data.fileName;
            apicaller('put', `${BASEURL}/employee/update`, inputObj)
              .then((res) => {
                if (res.status === 200) {
                  checkIfProfileImg(inputObj);
                  setState({
                    openToast: true,
                    message: 'Image Updated Successfully',
                    toastrStyle: 'toastr-success',
                    vertical: 'top',
                    horizontal: 'right'
                  });
                }
              })
              .catch((err) => {
                setState({
                  openToast: true,
                  message: 'Error Occured while adding Employee Image',
                  toastrStyle: 'toastr-warning',
                  vertical: 'top',
                  horizontal: 'right'
                });
                console.log('update employee err', err);
              });
          }
        })
        .catch((err) => {
          console.log('Iamge Upload err', err);
          setState({
            openToast: true,
            message: 'err',
            toastrStyle: 'toastr-warning',
            vertical: 'top',
            horizontal: 'right'
          });
        });
      setEditModal(false);
      setFiles([]);
    } else {
      inputObj['file'] = null;
      setProfileImg(empty_profile_picture);
      apicaller('put', `${BASEURL}/employee/update`, inputObj)
        .then((res) => {
          if (res.status === 200) {
            setState({
              openToast: true,
              message: 'Image Updated Successfully',
              toastrStyle: 'toastr-success',
              vertical: 'top',
              horizontal: 'right'
            });
          }
        })
        .catch((err) => {
          setState({
            openToast: true,
            message: 'Error Occured while adding Employee Image',
            toastrStyle: 'toastr-warning',
            vertical: 'top',
            horizontal: 'right'
          });
          console.log('update employee err', err);
        });
    }
  }

  return (
    <BlockUi
      tag='div'
      blocking={blocking}
      loader={
        <ClimbingBoxLoader loading={blocking} color={'var(--primary)'} />
      }>
      <Card>
        <Grid container spacing={0}>
            <Grid item md={10} lg={10} xl={10} className='mx-auto'>
            <div className='text-center my-4'>
              <h1 className='display-4 mb-1 '>Create Employee</h1>
            </div>
            <Grid container spacing={6}>
              <Grid item xs={12} sm={6}>
                <Grid item>
                  <div>
                    <label className=' mb-2'>Employee ID</label>
                    <TextField
                      style={isAutoGenerated ? { background: 'lightgrey' } : {}}
                      id='outlined-employeeID'
                      placeholder='Employee ID'
                      variant='outlined'
                      fullWidth
                      size='small'
                      name='employeeID'
                      value={employeeID}
                      disabled={isAutoGenerated}
                      onChange={event => {
                        const result = event.target.value.replace(/[^a-z0-9]/gi, '');
                        setEmployeeId(result.toUpperCase())
                      }}
                      helperText={
                        !isAutoGenerated &&
                          isSubmitted &&
                          (!employeeID || employeeID === '')
                          ? 'Employee ID is required'
                          : ''
                      }
                      error={
                        !isAutoGenerated &&
                          isSubmitted &&
                          (!employeeID || employeeID === '')
                          ? true
                          : false
                      }></TextField>
                  </div>
                  <br></br>
                </Grid>
                <Grid item>
                  <div>
                    <label className=' mb-2'>Employee Job Type *</label>
                    <TextField
                      id='outlined-jobType'
                      label='Select'
                      variant='outlined'
                      fullWidth
                      select
                      size='small'
                      name='jobType'
                      value={jobType}
                      onChange={event => {
                        setJobType(event.target.value)
                      }}
                      helperText={
                        (isJobTypeRequired
                          ? 'Job type is required'
                          : '') ||
                            ((setupBy == "jobType" && probationRequiredError && !jobType) 
                            ? probationRequiredError
                            : '')
                      }
                      error={isJobTypeRequired || (setupBy == "jobType" && probationRequiredError)}
                    >
                      {jobTypes.map(option => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.value}
                        </MenuItem>
                      ))}
                    </TextField>
                  </div>
                  <br></br>
                </Grid>
              </Grid>
              <Grid item xs={12} sm={6}>
                {edit ? (
                  <Grid
                    item
                    md={6}
                    container
                    className='mx-auto'
                    direction='row'>
                    <Grid item md={12} className='mx-auto'>
                      <div className='rounded avatar-image overflow-hidden d-140 bg-neutral-success text-center font-weight-bold text-success d-flex justify-content-center align-items-center'>
                        <img
                          className='img-fluid img-fit-container rounded-sm'
                          src={profileImg}
                          alt='...'
                        />
                      </div>
                    </Grid>
                    <Grid item md={12} className='mx-auto'>
                      <div
                        {...getRootProps({
                          className: 'dropzone-upload-wrapper'
                        })}
                        className='align-items-center justify-content-center'>
                        <input {...getInputProps()} />
                        <Button
                          onClick={e => {
                            setDeleteModal(true)
                          }}
                          className='btn-neutral-danger mx-1 shadow-none d-30 border-0 p-0 d-inline-flex align-items-right justify-content-center'>
                          <FontAwesomeIcon
                            icon={['fas', 'trash']}
                            className='font-size-sm'
                          />
                        </Button>
                        <Button
                          onClick={e => setEditModal(true)}
                          className='btn-primary mx-1 rounded-sm shadow-none hover-scale-sm d-30 border-0 p-0 d-inline-flex align-items-center justify-content-center'>
                          <FontAwesomeIcon
                            icon={['far', 'edit']}
                            className='font-size-sm'
                          />
                        </Button>
                      </div>
                    </Grid>
                  </Grid>
                ) : (
                  <Grid item md={6}>
                    <label className=' mb-2'>Add Employee Photo</label>
                    <div className='d-flex'>
                      <div className='dropzone rounded shadow-xxl'>
                        <div
                          {...getRootProps({
                            className: 'dropzone-upload-wrapper'
                          })}>
                          <input {...getInputProps()} />
                          <div className='dropzone-inner-wrapper d-140 rounded dropzone-avatar'>
                            <div className='avatar-icon-wrapper d-140 rounded m-2'>
                              <Button
                                onClick={open}
                                className='avatar-button badge shadow-sm btn-icon badge-position badge-position--top-right border-0 text-indent-0 d-40 badge-circle btn-second text-white'>
                                <PublishTwoToneIcon className='d-20' />
                              </Button>
                              <div>
                                {isDragAccept && (
                                  <div className='rounded overflow-hidden d-140 bg-success text-center font-weight-bold text-white d-flex justify-content-center align-items-center'>
                                    <CheckIcon className='d-40' />
                                  </div>
                                )}
                                {isDragReject && (
                                  <div className='rounded overflow-hidden d-140 bg-danger text-center font-weight-bold text-white d-flex justify-content-center align-items-center'>
                                    <CloseTwoToneIcon className='d-60' />
                                  </div>
                                )}
                                {!isDragActive && (
                                  <div className='rounded overflow-hidden d-140 bg-neutral-dark text-center font-weight-bold text-black-50 d-flex justify-content-center align-items-center'>
                                    <AccountCircleTwoToneIcon className='d-50' />
                                  </div>
                                )}
                              </div>

                              {thumbs.length > 0 && <div>{thumbs}</div>}
                            </div>
                          </div>
                        </div>
                        {files[0] ? (
                          <Button
                            size='small'
                            onClick={() => setFiles([])}
                            className='btn-primary m-4'>
                            Remove
                          </Button>
                        ) : (
                          ''
                        )}
                      </div>
                    </div>
                  </Grid>
                )}
                <br></br>{' '}
              </Grid>
            </Grid>
            {/* <Grid container spacing={6}>
              <Grid item md= {6}>
                <label className=' mb-2'>Job Status *</label>
                <TextField
                  id='outlined-jobStatus'
                  label='Select'
                  variant='outlined'
                  fullWidth
                  select
                  size='small'
                  name='jobStatus'
                  value={jobStatus}
                  onChange={event => {
                    setJobStatus(event.target.value)
                    if (event.target.value == 'Probation') {
                      handleProbationSetup()
                    }
                  }}
                  helperText={
                    isSubmitted && (!jobStatus || jobStatus === '')
                      ? 'Job status is required'
                      : ''
                  }
                  error={
                    isSubmitted && (!jobStatus || jobStatus === '')
                      ? true
                      : false
                  }>
                  {jobStatusList.map(option => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.value}
                    </MenuItem>
                  ))}
                </TextField>
              </Grid>
              <Grid item md={6}>
                {jobStatus == 'Probation' && (
                  <>
                    <label
                      className="mb-2">
                      Probation Confirmation Date *
                    </label>
                    <MuiPickersUtilsProvider
                      utils={DateFnsUtils}
                      style={{ margin: '0%' }}>
                      <KeyboardDatePicker
                        style={{ margin: '0%' }}
                        inputVariant="outlined"
                        format="dd/MM/yyyy"
                        margin="normal"
                        minDate={new Date()}
                        id="date-picker-inline"
                        fullWidth
                        size="small"
                        value={probationConfirmationDate}
                        onChange={(event) => {
                          setProbationConfirmationDate(event);
                        }}
                        KeyboardButtonProps={{
                          'aria-label': 'change date'
                        }}
                        error={((isSubmitted && (probationConfirmationDate ? false : true)) || probationRequiredError)}
                        helperText={((isSubmitted && (probationConfirmationDate ? "" : "Field is Mandatory")) || probationRequiredError)}
                      />
                    </MuiPickersUtilsProvider>
                  </>
                )}
              </Grid>
            </Grid> */}
            <Grid container spacing={6}>
              <Grid item md= {6}>               
                <div>
                  <label className=' mb-2'>Job Status *</label>
                  <TextField
                    id='outlined-jobStatus'
                    label='Select'
                    variant='outlined'
                    fullWidth
                    select
                    size='small'
                    name='jobStatus'
                    value={jobStatus}
                    onChange={event => {
                      setJobStatus(event.target.value)
                      if (event.target.value == 'Probation') {
                        handleProbationSetup()
                      }
                    }}
                    helperText={
                      isSubmitted && (!jobStatus || jobStatus === '')
                        ? 'Job status is required'
                        : ''
                    }
                    error={
                      isSubmitted && (!jobStatus || jobStatus === '')
                        ? true
                        : false
                    }>
                    {jobStatusList.map(option => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.value}
                      </MenuItem>
                    ))}
                  </TextField>
                </div>
              </Grid>
              <Grid item md={6}>
                {jobStatus == 'Probation' && (
                  <>
                    <label
                      className="mb-2">
                      Probation Confirmation Date *
                    </label>
                    <MuiPickersUtilsProvider
                      utils={DateFnsUtils}
                      style={{ margin: '0%' }}>
                      <KeyboardDatePicker
                        style={{ margin: '0%' }}
                        inputVariant="outlined"
                        format="dd/MM/yyyy"
                        margin="normal"
                        minDate={new Date()}
                        id="date-picker-inline"
                        fullWidth
                        size="small"
                        value={probationConfirmationDate}
                        onChange={(event) => {
                          setProbationConfirmationDate(event);
                        }}
                        KeyboardButtonProps={{
                          'aria-label': 'change date'
                        }}
                        error={
                          ((isSubmitted && (probationConfirmationDate ? false : true)) ||
                            (probationRequiredError ? probationRequiredError : '')
                            + (hireDateError ? hireDateError : ''))
                        }
                        helperText={
                          ((isSubmitted && (probationConfirmationDate ? "" : "Field is Mandatory")) ||
                            (probationRequiredError ? probationRequiredError : '')
                            + (hireDateError ? hireDateError : ''))
                        }
                      />
                    </MuiPickersUtilsProvider>
                  </>
                )}
              </Grid>
            </Grid>
            <br></br>
            Legal Name
            <Grid container spacing={6}>
              <Grid item md={4}>
                <div>
                  <label className=' mb-2'>First Name * </label>
                  <TextField
                    id='outlined-firstName'
                    placeholder='First Name'
                    variant='outlined'
                    fullWidth
                    size='small'
                    name='firstName'
                    value={firstName}
                    onChange={event => {
                      setFirstName(event.target.value)
                    }}
                    helperText={
                      isSubmitted && (!firstName || firstName === '')
                        ? 'First Name is required'
                        : ''
                    }
                    error={
                      isSubmitted && (!firstName || firstName === '')
                        ? true
                        : false
                    }
                  />
                </div>
              </Grid>
              <Grid item md={4}>
                <div>
                  <label className=' mb-2'>Middle Name</label>
                  <TextField
                    id='outlined-middleName'
                    placeholder='Middle Name'
                    variant='outlined'
                    fullWidth
                    size='small'
                    name='middleName'
                    value={middleName}
                    onChange={event => {
                      setMiddleName(event.target.value)
                    }}
                  />
                </div>
              </Grid>
              <Grid item md={4}>
                <div>
                  <label className=' mb-2'>Last Name *</label>
                  <TextField
                    id='outlined-lastName'
                    placeholder='Last Name'
                    variant='outlined'
                    fullWidth
                    size='small'
                    name='lastName'
                    value={lastName}
                    onChange={event => {
                      setLastName(event.target.value)
                    }}
                    helperText={
                      isSubmitted && (!lastName || lastName === '')
                        ? 'Last Name is required'
                        : ''
                    }
                    error={
                      isSubmitted && (!lastName || lastName === '')
                        ? true
                        : false
                    }
                  />
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Father/Husband</label>
                  <TextField
                    variant='outlined'
                    fullWidth
                    id='outlined-fatherOrHusband'
                    select
                    label='Select'
                    size='small'
                    name='fatherOrHusband'
                    value={fatherOrHusband}
                    onChange={event => {
                      setFatherHusband(event.target.value)
                    }}>
                    {fatherHusbandType.map(option => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.value}
                      </MenuItem>
                    ))}
                  </TextField>
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Father/Husband Name *</label>
                  <TextField
                    id='outlined-fatherHusbandName'
                    placeholder='Father/Husband Name'
                    variant='outlined'
                    fullWidth
                    size='small'
                    name='fatherHusbandName'
                    value={fatherHusbandName}
                    onChange={event => {
                      setFatherHusbandName(event.target.value)
                    }}
                    helperText={
                      isSubmitted &&
                        (!fatherHusbandName || fatherHusbandName === '')
                        ? 'Father/Husband Name is required'
                        : ''
                    }
                    error={
                      isSubmitted &&
                        (!fatherHusbandName || fatherHusbandName === '')
                        ? true
                        : false
                    }
                  />
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Date of Birth *</label>
                  <MuiPickersUtilsProvider
                    utils={DateFnsUtils}
                    style={{ margin: '0%' }}>
                    <KeyboardDatePicker
                      style={{ margin: '0%' }}
                      inputVariant='outlined'
                      format='dd/MM/yyyy'
                      margin='normal'
                      id='date-picker-inline'
                      fullWidth
                      size='small'
                      maxDate={new Date()}
                      value={DOB}
                      onChange={event => {
                        setDOB(event)
                        calculateAge(event)
                      }}
                      error={
                        isSubmitted
                          ? DOB
                            ? DOB !== null &&
                              DOB instanceof Date &&
                              new Date(DOB) > new Date()
                              ? " Date of birth Cannot be greater than today's Date"
                              : null
                            : ' Date of Birth Required'
                          : DOB !== null &&
                            DOB instanceof Date &&
                            new Date(DOB) > new Date()
                            ? "Date of birth Cannot be greater than today's Date"
                            : null
                              ? !isSubmitted
                              : DOB !== null &&
                                DOB instanceof Date &&
                                new Date(DOB) > new Date()
                                ? "Date of birth Cannot be greater than today's Date"
                                : null
                      }
                      helperText={
                        isSubmitted
                          ? DOB
                            ? DOB !== null &&
                              DOB instanceof Date &&
                              new Date(DOB) > new Date()
                              ? "Date of birth Cannot be greater than today's Date"
                              : null
                            : ' Date of Birth Required'
                          : DOB !== null &&
                            DOB instanceof Date &&
                            new Date(DOB) > new Date()
                            ? "Date of birth Cannot be greater than today's Date"
                            : null
                              ? !isSubmitted
                              : DOB !== null &&
                                DOB instanceof Date &&
                                new Date(DOB) > new Date()
                                ? "Date of birth Cannot be greater than today's Date"
                                : null
                      }
                      KeyboardButtonProps={{
                        'aria-label': 'change date'
                      }}
                    />
                  </MuiPickersUtilsProvider>
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Celebrates On</label>
                  <Grid container spacing={0}>
                    <Grid item md={7}>
                      <Switch
                        onChange={event => {
                          console.log(event)
                          setCelebratesOn(event.target.checked)
                          setCelebratesOnDate(null)
                        }}
                        checked={celebratesOn}
                        name='EmailId'
                        color='primary'
                        className='switch-small'
                      />{' '}
                      &nbsp; {!celebratesOn ? '' : 'Same as Date Of Birth'}
                    </Grid>
                    <Grid item md={5}>
                      {!celebratesOn ? (
                        <MuiPickersUtilsProvider
                          utils={DateFnsUtils}
                          style={{ margin: '0%' }}>
                          <KeyboardDatePicker
                            style={{ margin: '0%' }}
                            inputVariant='outlined'
                            format='dd/MM/yyyy'
                            margin='normal'
                            maxDate={new Date()}
                            id='date-picker-inline'
                            fullWidth
                            size='small'
                            value={celebrationDate}
                            onChange={event => {
                              setCelebratesOnDate(event)
                            }}
                            error={
                              isSubmitted
                                ? celebrationDate
                                  ? celebrationDate !== null &&
                                    celebrationDate instanceof Date &&
                                    new Date(celebrationDate) > new Date()
                                    ? " Date of birth Cannot be greater than today's Date"
                                    : null
                                  : ' Date of Birth Required'
                                : celebrationDate !== null &&
                                  celebrationDate instanceof Date &&
                                  new Date(celebrationDate) > new Date()
                                  ? "Date of birth Cannot be greater than today's Date"
                                  : null
                                    ? !isSubmitted
                                    : celebrationDate !== null &&
                                      celebrationDate instanceof Date &&
                                      new Date(celebrationDate) > new Date()
                                      ? "Date of birth Cannot be greater than today's Date"
                                      : null
                            }
                            helperText={
                              isSubmitted
                                ? celebrationDate
                                  ? celebrationDate !== null &&
                                    celebrationDate instanceof Date &&
                                    new Date(celebrationDate) > new Date()
                                    ? "Date of birth Cannot be greater than today's Date"
                                    : null
                                  : ' Date of Birth Required'
                                : celebrationDate !== null &&
                                  celebrationDate instanceof Date &&
                                  new Date(celebrationDate) > new Date()
                                  ? "Date of birth Cannot be greater than today's Date"
                                  : null
                                    ? !isSubmitted
                                    : celebrationDate !== null &&
                                      celebrationDate instanceof Date &&
                                      new Date(celebrationDate) > new Date()
                                      ? "Date of birth Cannot be greater than today's Date"
                                      : null
                            }  
                            KeyboardButtonProps={{
                              'aria-label': 'change date'
                            }}
                          />
                        </MuiPickersUtilsProvider>
                      ) : (
                        ''
                      )}
                    </Grid>
                  </Grid>
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Birth Country</label>
                  <Autocomplete
                    id='combo-box-demo'
                    value={
                      countryIndex != null
                        ? countries[countryIndex] || ''
                        : null
                    }
                    options={countries}
                    getOptionLabel={option => option.name}
                    renderInput={params => (
                      <TextField
                        {...params}
                        label='Select'
                        variant='outlined'
                        fullWidth
                        size='small'
                        name='country'
                        value={
                          countryIndex != null
                            ? countries[countryIndex] || ''
                            : null
                        }
                      />
                    )}
                    onChange={(event, value) => {
                      const index = countries.findIndex(
                        country => country.name === value?.name
                      )
                      if (index != -1) {
                        setCountryIndex(index)
                        setCountry(countries[index].name)
                        setAllStates(countries[index].states)
                        setAddState(null)
                        setStateIndex(null)
                      } else {
                        setCountryIndex(null)
                        setCountry(null)
                        setAllStates([])
                        setAddState(null)
                        setStateIndex(null)
                      }
                    }}
                  />
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Birth State</label>
                  <Autocomplete
                    id='combo-box-demo'
                    options={allStates}
                    getOptionLabel={option => option}
                    value={
                      countryIndex != null
                        ? stateIndex != null
                          ? countries[countryIndex].states[stateIndex] || ''
                          : null
                        : null
                    }
                    renderInput={params => (
                      <TextField
                        {...params}
                        label='Select'
                        variant='outlined'
                        fullWidth
                        size='small'
                        name='state'
                        value={
                          countryIndex != null
                            ? stateIndex != null
                              ? countries[countryIndex].states[stateIndex] || ''
                              : null
                            : null
                        }
                      />
                    )}
                    onChange={(event, value) => {
                      const index = allStates.findIndex(
                        state => state === value
                      )
                      if (index != -1) {
                        setStateIndex(index)
                        setAddState(countries[countryIndex].states[index])
                      } else {
                        setStateIndex(null)
                        setAddState(null)
                      }
                    }}
                  />
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className='mb-2'>Place Of Birth</label>
                  <TextField
                    id='outlined-POB'
                    placeholder='Place Of Birth'
                    variant='outlined'
                    fullWidth
                    size='small'
                    name='POB'
                    value={POB}
                    onChange={event => {
                      setPOB(event.target.value)
                    }}
                  />
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Blood Group</label>
                  <TextField
                    variant='outlined'
                    fullWidth
                    id='outlined-bloodGroup'
                    select
                    label='Select'
                    size='small'
                    name='bloodGroup'
                    value={bloodGroup}
                    onChange={event => {
                      setBloodGroup(event.target.value)
                    }}>
                    {bloodGroupList.map(option => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.value}
                      </MenuItem>
                    ))}
                  </TextField>
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className='mb-2'>Nationality</label>
                  <TextField
                    id='outlined-nationality'
                    placeholder='Nationality'
                    variant='outlined'
                    fullWidth
                    size='small'
                    name='nationality'
                    value={nationality}
                    onChange={event => {
                      setNationality(event.target.value)
                    }}
                  />
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className='mb-2'>Gender *</label>
                  <TextField
                    variant='outlined'
                    fullWidth
                    id='outlined-gender'
                    select
                    label='Select'
                    size='small'
                    name='gender'
                    value={gender}
                    onChange={event => {
                      setGender(event.target.value)
                    }}
                    helperText={
                      (isSubmitted && !gender) || (isSubmitted && gender === '')
                        ? 'Gender is required'
                        : ''
                    }
                    error={
                      (isSubmitted && !gender) || (isSubmitted && gender === '')
                        ? true
                        : false
                    }
                    KeyboardButtonProps={{
                      'aria-label': 'change date'
                    }}>
                    {genders.map(option => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.value}
                      </MenuItem>
                    ))}
                  </TextField>
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Marital Status *</label>
                  <TextField
                    variant='outlined'
                    fullWidth
                    id='outlined-marital'
                    select
                    label='Select'
                    size='small'
                    name='marital'
                    value={maritalStatus}
                    onChange={event => {
                      setMaritalStatus(event.target.value)
                    }}
                    helperText={
                      (isSubmitted && !maritalStatus) ||
                        (isSubmitted && maritalStatus === '')
                        ? 'Marital Status is required'
                        : ''
                    }
                    error={
                      (isSubmitted && !maritalStatus) ||
                        (isSubmitted && maritalStatus === '')
                        ? true
                        : false
                    }>
                    {maritalStatusList.map(option => (
                      <MenuItem key={option.value} value={option.value}>
                        {option.value}
                      </MenuItem>
                    ))}
                  </TextField>
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className='mb-2'>Hire Date *</label>
                  <MuiPickersUtilsProvider
                    utils={DateFnsUtils}
                    style={{ margin: '0%' }}>
                    <KeyboardDatePicker
                      style={{ margin: '0%' }}
                      inputVariant='outlined'
                      format='dd/MM/yyyy'
                      margin='normal'
                      id='date-picker-inline'
                      fullWidth
                      size='small'
                      value={hireDate}
                      onChange={event => {
                        if (setupBy == "department" || setupBy == "designation" || setupBy == "location" || setupBy == "jobType") {
                          setHireDateError(null)
                        }
                        setHireDate(event)
                      }}
                      KeyboardButtonProps={{
                        'aria-label': 'change date'
                      }}
                      helperText={
                        ((isSubmitted && !hireDate) ||
                          (isSubmitted && hireDate === null)
                          ? 'Hire Date is required'
                          : '') || hireDateError
                      }
                      error={
                        ((isSubmitted && !hireDate) ||
                          (isSubmitted && hireDate === null)
                          ? true
                          : false) || hireDateError
                      }
                    />
                  </MuiPickersUtilsProvider>
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Hire Reason *</label>
                  <Autocomplete
                    id='combo-box-demo'
                    options={allReasons}
                    getOptionLabel={option => option.reasonName}
                    value={
                      reasonIndex != null ? allReasons[reasonIndex] || '' : null
                    }
                    renderInput={params => (
                      <TextField
                        {...params}
                        label='Select'
                        variant='outlined'
                        fullWidth
                        size='small'
                        name='hireReason'
                        value={hireReason || ''}
                        helperText={
                          (isSubmitted && !hireReason) ||
                            (isSubmitted && hireReason === '')
                            ? 'Hire Reason is required'
                            : ''
                        }
                        error={
                          (isSubmitted && !hireReason) ||
                            (isSubmitted && hireReason === '')
                            ? true
                            : false
                        }
                      />
                    )}
                    onChange={(event, value) => {
                      const index = allReasons.findIndex(
                        reason => reason.reasonCode === value?.reasonCode
                      )
                      if (index != -1) {
                        setReasonIndex(index)
                        setHireReason(allReasons[index].reasonCode)
                      }
                    }}
                  />
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Employee Department *</label>
                  <Autocomplete
                    id='combo-box-demo'
                    options={allDepartments}
                    getOptionLabel={option => option.name}
                    value={
                      departIndex != null
                        ? allDepartments[departIndex] || ''
                        : null
                    }
                    renderInput={params => (
                      <TextField
                        {...params}
                        label='Select'
                        variant='outlined'
                        fullWidth
                        size='small'
                        name='empDep'
                        value={empDep || ''}
                        helperText={
                          (isDepartmentRequired
                            ? 'Department is required'
                            : '') ||
                          ((setupBy == "department" && probationRequiredError && departIndex === null) 
                            ? probationRequiredError
                            : '')
                          
                        }
                        error={isDepartmentRequired || (setupBy == "department" && probationRequiredError)}
                      />
                    )}
                    onChange={(event, value) => {
                      const index = allDepartments.findIndex(
                        dep => dep.id === value?.id
                      )
                      if (index != -1) {
                        setDepartIndex(index)
                        setEmpDepartment(allDepartments[index].id)
                      }

                      if (value?.locations.length > 0) {
                        let locations = value?.locations
                        let result = []
                        for (let i = 0; i < locations.length; i++) {
                          const searchString = locations[i]

                          for (let j = 0; j < allFetchedLocations.length; j++) {
                            const object = allFetchedLocations[j]

                            if (object.locationId === searchString) {
                              result.push(object)
                            }
                          }
                        }
                        setAllLocation(result)
                        setEmpLocation('')
                      } else {
                        setAllLocation(allFetchedLocations)
                        setEmpLocation('')
                      }
                    }
                    }
                  />
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Employee Job Location *</label>
                  <Autocomplete
                    id='combo-box-demo'
                    options={allLocations}
                    getOptionLabel={option => option.locationName}
                    value={
                      loctnIndex != null ? allLocations[loctnIndex] || '' : null
                    }
                    renderInput={params => (
                      <TextField
                        {...params}
                        label='Select'
                        variant='outlined'
                        fullWidth
                        size='small'
                        name='empLoc'
                        value={empLoc || ''}
                        helperText={
                          (isLocationRequired
                            ? 'Location is required'
                            : '') ||
                          ((setupBy == "location" && probationRequiredError && loctnIndex === null) 
                           ? probationRequiredError
                           : '')
                        }
                        error={isLocationRequired || (setupBy == "location" && probationRequiredError)}
                      />
                    )}
                    onChange={(event, value) => {
                      const index = allLocations.findIndex(
                        loc => loc.locationId === value?.locationId
                      )
                      if (index != -1) {
                        setLoctnIndex(index)
                        setEmpLocation(allLocations[index].locationId)
                      }
                    }}
                  />
                </div>
              </Grid>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Employee Designation *</label>
                  <Autocomplete
                    id='combo-box-demo'
                    options={allDesigntaion}
                    getOptionLabel={option => option.name}
                    value={
                      designationIndex != null
                        ? allDesigntaion[designationIndex] || ''
                        : null
                    }
                    renderInput={params => (
                      <TextField
                        {...params}
                        label='Select'
                        variant='outlined'
                        fullWidth
                        size='small'
                        name='empDes'
                        value={
                          designationIndex != null
                            ? allDesigntaion[designationIndex] || ''
                            : null
                        }
                        helperText={
                          (isDesignationRequired
                            ? 'Designation is required'
                            : '') ||
                          ((setupBy == "designation" && probationRequiredError && designationIndex === null) 
                            ? probationRequiredError
                            : '')
                        }
                        error={isDesignationRequired || (setupBy == "designation" && probationRequiredError)}
                      />
                    )}
                    onChange={(event, value) => {
                      const index = allDesigntaion.findIndex(
                        desig => desig.id === value?.id
                      )
                      if (index != -1) {
                        setDesigIndex(index)
                        setEmpDesignation(allDesigntaion[index].id)
                      }
                    }}
                  />
                </div>
              </Grid>
            </Grid>
            <Grid container spacing={6}>
              <Grid item md={6}>
                <div>
                  <label className=' mb-2'>Manager ID</label>
                  <Autocomplete
                    id='combo-box-demo'
                    options={allEmployees}
                    getOptionLabel={option => option.nameWithId}
                    value={
                      managerIndex != null
                        ? allEmployees[managerIndex] || ''
                        : null
                    }
                    renderInput={params => (
                      <TextField
                        {...params}
                        label='Select'
                        variant='outlined'
                        fullWidth
                        size='small'
                        name='managerUUID'
                        value={
                          managerIndex != null
                            ? allEmployees[managerIndex] || ''
                            : null
                        }
                      />
                    )}
                    onChange={(event, value) => {
                      const index = allEmployees.findIndex(
                        emp => emp.uuid === value?.uuid
                      )
                      if (index != -1) {
                        setManagerIndex(index)
                        setManagerUUID(allEmployees[index].uuid)
                      }
                    }}
                  />
                </div>
              </Grid>
            </Grid>
          </Grid>
        </Grid>
        <br></br>
        <div className='divider' />
        <div className='divider' />
        <div className='float-left' style={{ marginLeft: '6.5%' }}>
          <Button
            className='btn-primary mb-4 m-2'
            component={NavLink}
            to='./dashboard'>
            Cancel
          </Button>
          <Button
            className='btn-primary mb-4 m-2'
            type='submit'
            onClick={e => save(e)}>
            {saveButtonLabel}
          </Button>
        </div>
        <Snackbar
          anchorOrigin={{ vertical, horizontal }}
          key={`${vertical},${horizontal}`}
          open={open1}
          classes={{ root: toastrStyle }}
          onClose={handleClose}
          message={message}
          autoHideDuration={2000}
        />

        <Dialog
          open={deleteModal}
          onClose={deleteModaltoggle}
          classes={{ paper: 'shadow-lg rounded' }}>
          <div className='text-center p-5'>
            <div className='avatar-icon-wrapper rounded-circle m-0'>
              <div className='d-inline-flex justify-content-center p-0 rounded-circle btn-icon avatar-icon-wrapper bg-neutral-danger text-danger m-0 d-130'>
                <FontAwesomeIcon
                  icon={['fas', 'times']}
                  className='d-flex align-self-center display-3'
                />
              </div>
            </div>
            <h4 className='font-weight-bold mt-4'>
              Are you sure you want to delete this Photo?
            </h4>
            <p className='mb-0 font-size-lg text-muted'>
              You cannot undo this operation.
            </p>
            <div className='pt-4'>
              <Button
                onClick={deleteModaltoggle}
                className='btn-neutral-secondary btn-pill mx-1'>
                <span className='btn-wrapper--label'>Cancel</span>
              </Button>
              <Button
                onClick={handleDeleteID}
                className='btn-danger btn-pill mx-1'>
                <span className='btn-wrapper--label'>Delete</span>
              </Button>
            </div>
          </div>
        </Dialog>

        <Dialog
          open={editModal}
          onClose={editModalToggle}
          classes={{ paper: 'shadow-lg rounded' }}>
          <div className='dropzone'>
            <div
              {...getRootProps({
                className: 'dropzone-upload-wrapper'
              })}>
              <input {...getInputProps()} />
              <div className='dropzone-inner-wrapper bg-white' onClick={open}>
                {isDragAccept && (
                  <div>
                    <div className='d-140 hover-scale-lg icon-blob icon-blob-animated btn-icon text-success mx-auto'>
                      <svg
                        className='d-140 opacity-2'
                        viewBox='0 0 600 600'
                        xmlns='http://www.w3.org/2000/svg'>
                        <g transform='translate(300,300)'>
                          <path
                            d='M170.4,-137.2C213.2,-82.3,234.8,-11.9,223.6,56.7C212.4,125.2,168.5,191.9,104.3,226.6C40.2,261.3,-44.1,264,-104,229.8C-163.9,195.7,-199.4,124.6,-216.2,49.8C-233,-25.1,-231,-103.9,-191.9,-158C-152.7,-212.1,-76.4,-241.6,-6.3,-236.6C63.8,-231.6,127.7,-192.2,170.4,-137.2Z'
                            fill='currentColor'
                          />
                        </g>
                      </svg>
                      <div className='blob-icon-wrapper'>
                        <CheckIcon className='d-50' />
                      </div>
                    </div>
                    <div className='font-size-sm text-success'>
                      All files will be uploaded!
                    </div>
                  </div>
                )}
                {isDragReject && (
                  <div>
                    <div className='d-140 hover-scale-lg icon-blob icon-blob-animated btn-icon text-danger mx-auto'>
                      <svg
                        className='d-140 opacity-2'
                        viewBox='0 0 600 600'
                        xmlns='http://www.w3.org/2000/svg'>
                        <g transform='translate(300,300)'>
                          <path
                            d='M169,-144C206.7,-87.5,216.5,-18,196.9,35.7C177.3,89.4,128.3,127.1,75.2,150.7C22,174.2,-35.4,183.5,-79.7,163.1C-124,142.7,-155.1,92.6,-164.1,40.9C-173.1,-10.7,-160.1,-64,-129,-118.9C-98,-173.8,-49,-230.4,8.3,-237.1C65.7,-243.7,131.3,-200.4,169,-144Z'
                            fill='currentColor'
                          />
                        </g>
                      </svg>
                      <div className='blob-icon-wrapper'>
                        <CloseTwoToneIcon className='d-50' />
                      </div>
                    </div>
                    <div className='font-size-sm text-danger'>
                      Some files will be rejected! Accepted only Images
                    </div>
                  </div>
                )}
                {!isDragActive && (
                  <div>
                    <div className='d-140 hover-scale-lg icon-blob btn-icon text-first mx-auto'>
                      <svg
                        className='d-140 opacity-2'
                        viewBox='0 0 600 600'
                        xmlns='http://www.w3.org/2000/svg'>
                        <g transform='translate(300,300)'>
                          <path
                            d='M171.2,-128.5C210.5,-87.2,223.2,-16.7,205.1,40.4C186.9,97.5,137.9,141.1,81.7,167.2C25.5,193.4,-38,202.1,-96.1,181.2C-154.1,160.3,-206.7,109.7,-217.3,52.7C-227.9,-4.4,-196.4,-68,-153.2,-110.2C-110,-152.4,-55,-173.2,5.5,-177.5C65.9,-181.9,131.9,-169.8,171.2,-128.5Z'
                            fill='currentColor'
                          />
                        </g>
                      </svg>
                      <div className='blob-icon-wrapper'>
                        <PublishTwoToneIcon className='d-50' />
                      </div>
                    </div>
                    <div className='font-size-sm'>
                      Drop files here or click to upload
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className='card-footer p-3 bg-secondary'>
            <div>
              <div className='font-weight-bold mb-3 text-uppercase text-dark font-size-sm text-center'>
                Uploaded Files
              </div>
              {thumbs.length > 0 && (
                <div>
                  <Alert severity='success' className='text-center mb-3'>
                    You have uploaded <b>{thumbs.length}</b> files!
                  </Alert>
                  <Grid container spacing={0}>
                    {thumbs}
                  </Grid>
                  <div className='pt-4'>
                    <Button
                      onClick={e => {
                        setFiles([])
                        editModalToggle()
                      }}
                      className='btn-neutral-secondary btn-pill mx-1'>
                      <span className='btn-wrapper--label'>Cancel</span>
                    </Button>
                    <Button
                      onClick={updateProfilePic}
                      className='btn-danger btn-pill mx-1'>
                      <span className='btn-wrapper--label'>Save</span>
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </Dialog>
      </Card>
    </BlockUi>
  )
}

const mapStateToProps = state => ({
  selectedCompany: state.Auth.selectedCompany,
  countriesMasterData: state.Auth.countriesMasterData
})

const mapDispatchToProps = dispatch => ({})

export default connect(mapStateToProps, mapDispatchToProps)(HireProcess)
