import React, { useState, Component, useEffect } from 'react';
import { useHistory, useLocation } from 'react-router-dom';
import {
  Grid,
  Card,
  TextField,
  Button,
  Snackbar,
  Radio,
  Box
} from '@material-ui/core';

import 'date-fns';
import { NavLink } from 'react-router-dom';
import apicaller from 'helper/Apicaller';

import { ClimbingBoxLoader } from 'react-spinners';
import BlockUi from 'react-block-ui';

import { BASEURL } from 'config/conf';
import empty_profile_picture from '../../assets/images/avatars/empty_profile_picture.jpg';
import { connect } from 'react-redux';

const ResetPasswordByAdmin = (props) => {
  const { selectedEmployee, selectedCompany } = props;

  const [state, setState] = useState({
    openToast: false,
    vertical: 'top',
    horizontal: 'right',
    toastrStyle: 'sucess',
    message: 'This is a toastr/snackbar notification!'
  });
  const { vertical, horizontal, openToast, toastrStyle, message } = state;

  const ruleNames = ['Length Rule', 'Contains Rule', 'Repetitive Rule'];
  const [passwordRulesList, setPasswordRulesList] = useState([]);
  const [passwordRules, setPasswordRules] = useState();

  const [employeeDetail, setEmployeeDetail] = useState();
  const [blocking, setBlocking] = useState(false);
  const [profileImg, setProfileImg] = useState(empty_profile_picture);
  const [preferredEmail, setPreferredEmail] = useState(null);
  const [preferredEmailType, setPreferredEmailType] = useState(null);
  const [generatePasswordManually, setGeneratePasswordManually] =
    useState(false);
  const [password, setPassword] = useState('');
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isValid, setIsValid] = useState(false);
  const [errorMessages, setErrorMessages] = useState('');

  const handleClose = () => {
    setState({ ...state, openToast: false });
  };

  useEffect(() => {
    console.log(selectedEmployee);

    if (selectedEmployee) {
      setEmployeeDetail(selectedEmployee);
      setPreferredEmail(selectedEmployee.employeeEmail[0]?.email);
      setPreferredEmailType(selectedEmployee.employeeEmail[0]?.type);
      checkIfProfileImg(selectedEmployee);
    } else {
      setState({
        openToast: true,
        message:
          "Employee is not there in the context kindly select employee in the employee's page",
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      });
    }

    apicaller('get', `${BASEURL}/password-rule/` + selectedCompany.uuid)
      .then((res) => {
        if (res.status === 200) {
          if (res.data != null) {
            const lengthRule = {
              ruleName: ruleNames[0],
              maxLength: res.data.lengthRule?.maximum,
              minLength: res.data.lengthRule?.minimum,
              status: res.data.lengthRule?.status
            };
            const repetitiveRule = {
              ruleName: ruleNames[2],
              count: res.data.repetitiveRule?.count,
              status: res.data.repetitiveRule?.status
            };
            const list = [];
            list.push(lengthRule, repetitiveRule);
            res.data.containsRule.forEach((containsRule) => {
              const rule = {
                ruleName: ruleNames[1],
                type: containsRule.type,
                minOrMax: containsRule.minOrMax,
                length: containsRule.length,
                status: containsRule.status
              };
              list.push(rule);
            });
            setPasswordRulesList(list);
            setPasswordRules(res.data);
          }
        }
      })
      .catch((err) => {
        console.log('get Password Rules Error', err);
      });
  }, []);

  const save = () => {
    const inputObj = {
      username: selectedEmployee.userId,
      autoGeneratedPassword: !generatePasswordManually,
      email: preferredEmail,
      password: password,
      uuid: selectedEmployee.uuid
    };
    setIsSubmitted(true);
    if (selectedEmployee.userId) {
      if (generatePasswordManually) {
        if (password == null || password.length == 0) {
          setState({
            openToast: true,
            message: 'Password Can not be Empty',
            toastrStyle: 'toastr-warning',
            vertical: 'top',
            horizontal: 'right'
          });
        } else {
          apicaller('post', `${BASEURL}/verification/resetPassword`, inputObj)
            .then((res) => {
              if (res.status === 200) {
                setState({
                  openToast: true,
                  message: 'Password Updated Sucessfully',
                  toastrStyle: 'toastr-success',
                  vertical: 'top',
                  horizontal: 'right'
                });
              }
            })
            .catch((err) => {
              setBlocking(false);
              setState({
                openToast: true,
                message: err.response.data,
                toastrStyle: 'toastr-warning',
                vertical: 'top',
                horizontal: 'right'
              });
              console.log('updatePassword err', err);
            });
        }
      } else {
        if (
          !preferredEmail ||
          preferredEmail?.toLowerCase() === 'N/A'.toLowerCase()
        ) {
          setState({
            openToast: true,
            message:
              'Preferred Email is not added for the employee to autogenerate password.',
            toastrStyle: 'toastr-warning',
            vertical: 'top',
            horizontal: 'right'
          });
        } else {
          apicaller('post', `${BASEURL}/verification/resetPassword`, inputObj)
            .then((res) => {
              if (res.status === 200) {
                setState({
                  openToast: true,
                  message: 'Password Updated Sucessfully',
                  toastrStyle: 'toastr-success',
                  vertical: 'top',
                  horizontal: 'right'
                });
              }
            })
            .catch((err) => {
              setBlocking(false);
              setState({
                openToast: true,
                message: err.response.data,
                toastrStyle: 'toastr-warning',
                vertical: 'top',
                horizontal: 'right'
              });
              console.log('updatePassword err', err);
            });
        }
      }
    } else {
      setState({
        openToast: true,
        message:
          'userId is not generated for this Employee. Kindly Generate UserId before Resetting Password',
        toastrStyle: 'toastr-warning',
        vertical: 'top',
        horizontal: 'right'
      });
    }
  };
  const checkIfProfileImg = (employeetionData) => {
    if (employeetionData?.file) {
      let path =
        employeetionData?.file?.filePath +
        '/' +
        employeetionData?.file?.fileName;
      apicaller('get', `${BASEURL}/storage?path=` + path)
        .then((res) => {
          if (res.status === 200) {
            if (res.data) {
              let baseStr64 = res.data;
              let imgSrc64 = 'data:image/jpg;base64,' + baseStr64;
              // Set the source of the Image to the base64 string
              setProfileImg(imgSrc64);
            }
          }
        })
        .catch((err) => {
          console.log('updateSession err', err);
        });
    }
  };

  // Check if the password meets all the rules
  const validatePassword = () => {
    const errorMessages = [];

    if (passwordRules.lengthRule) {
      if (passwordRules.lengthRule.status && password.length < passwordRules.lengthRule.minimum) {
        errorMessages.push(`Your Password should contain at least ${passwordRules.lengthRule.minimum} characters.`);
      }
      if (passwordRules.lengthRule.status && password.length > passwordRules.lengthRule.maximum) {
        errorMessages.push(`Your Password should contain Maximum ${passwordRules.lengthRule.maximum} characters.`);
      }
    }
    if (passwordRules?.containsRule) {
      let upper = 0, lower = 0, number = 0, special = 0;
      const str = password
      for (let i = 0; i < str?.length; i++) {
        if (str[i] >= 'A' && str[i] <= 'Z')
          upper++;
        else if (str[i] >= 'a' && str[i] <= 'z')
          lower++;
        else if (str[i] >= '0' && str[i] <= '9')
          number++;
        else
          special++;
      }
      passwordRules.containsRule.forEach((rule) => {
        if (rule.status && rule.type == 'Special Character') {
          if (rule.minOrMax == 'Minimum') {
            if (special < rule.length) { errorMessages.push(`Your Password must have ${rule.length} Special characters`); }
          }
          if (rule?.minOrMax == 'Maximum') {
            if (special < rule.length) { errorMessages.push(`Your Password must have ${rule.length} Special characters`); }
          }
        }
        if (rule?.status && rule.type == 'Upper Case') {
          if (rule?.minOrMax == 'Minimum') {
            if (upper < rule.length) { errorMessages.push(`Your Password must have ${rule.length} Upper Case`); }
          }
          if (rule?.minOrMax == 'Maximum') {
            if (upper < rule.length) { errorMessages.push(`Your Password must have ${rule.length} Upper Case`); }
          }
        }
        if (rule.status && rule.type == 'Lower Case') {
          if (rule.minOrMax == 'Minimum') {
            if (lower < rule.length) { errorMessages.push(`Your Password must have ${rule.length} Lower Case`); }
          }
          if (rule.minOrMax == 'Maximum') {
            if (lower < rule.length) { errorMessages.push(`Your Password must have ${rule.length} Lower Case`); }
          }
        }
      })
    }

    if (errorMessages.length > 0 && generatePasswordManually) {
      setIsValid(false);
      setErrorMessages(errorMessages);
    } else {
      setIsValid(true); // Password is valid
      setErrorMessages('');
      save()
    }
  };

  const getParsedDate = (date) => {
    if (date && date !== null && date !== '') {
      return new Date(date).toLocaleDateString('en-US', {
        day: '2-digit',
        month: 'short',
        year: 'numeric'
      });
    } else {
      return 'N/A';
    }
  };

  return (
    <>
      <BlockUi
        tag="div"
        blocking={blocking}
        loader={
          <ClimbingBoxLoader loading={blocking} color={'var(--primary)'} />
        }>
        <Card
          style={{
            padding: '25px',
            border: '1px solid #c4c4c4',
            margin: '25px'
          }}>
          <Grid container spacing={0}>
            <Grid item md={12} className="mx-auto">
              <Card
                style={{
                  border: '1px solid #c4c4c4',
                  margin: '25px 0'
                }}>
                <div className="p-4">
                  <Grid container spacing={2}>
                    <Grid item md={12} xl={2}>
                      <div className='rounded avatar-image overflow-hidden d-140  text-center text-success d-flex justify-content-center align-items-center'>
                        {selectedEmployee?.profilePic ? (
                          <img
                            className="img-fluid img-fit-container rounded-sm"
                            src={selectedEmployee?.profilePic}
                            style={{ width: '150px', height: '150px' }}
                            alt="..."
                          />
                        ) : (
                          <img
                            className="img-fluid img-fit-container rounded-sm"
                            src={empty_profile_picture}
                            style={{ width: '150px', height: '150px' }}
                            alt="..."
                          />
                        )}
                      </div>
                    </Grid>
                    <Grid item md={6} lg={6} xl={5}>
                      <Grid item md={12} className="d-flex">
                        <Grid item md={6}>
                          <div>
                            <div className="font-size-sm font-weight-bold mb-1">
                              Employee Name
                            </div>
                          </div>
                        </Grid>
                        <Grid item md={6}>
                          <p className="opacity-8 font-size-sm mb-4">
                            {employeeDetail?.employeeName
                              ? employeeDetail?.employeeName
                              : 'N/A'}
                          </p>
                        </Grid>
                      </Grid>
                      <Grid item md={12} className="d-flex">
                        <Grid item md={6}>
                          <div>
                            <div className="font-size-sm font-weight-bold mb-1">
                              DOB
                            </div>
                          </div>
                        </Grid>
                        <Grid item md={6}>
                          <p className="opacity-8 font-size-sm mb-4">
                            {getParsedDate(employeeDetail?.dob)}{' '}
                          </p>
                        </Grid>
                      </Grid>
                      <Grid item md={12} className="d-flex">
                        <Grid item md={6}>
                          <div>
                            <div className="font-size-sm font-weight-bold mb-1">
                              Department
                            </div>
                          </div>
                        </Grid>
                        <Grid item md={6}>
                          <p className="opacity-8 font-size-sm mb-4">
                            {employeeDetail?.department
                              ? employeeDetail?.department
                              : 'N/A'}{' '}
                          </p>
                        </Grid>
                      </Grid>
                    </Grid>
                    <Grid item md={6} lg={6} xl={5}>
                      <Grid item md={12} className="d-flex">
                        <Grid item md={6}>
                          <div>
                            <div className="font-size-sm font-weight-bold mb-1">
                              Employee ID
                            </div>
                          </div>
                        </Grid>
                        <Grid item md={6}>
                          <p className="opacity-8 font-size-sm mb-4">
                            {employeeDetail?.employeeID
                              ? employeeDetail?.employeeID
                              : 'N/A'}{' '}
                          </p>
                        </Grid>
                      </Grid>
                      <Grid item md={12} className="d-flex">
                        <Grid item md={6}>
                          <div>
                            <div className="font-size-sm font-weight-bold mb-1">
                              Designation
                            </div>
                          </div>
                        </Grid>
                        <Grid item md={6}>
                          <p className="opacity-8 font-size-sm mb-4">
                            {employeeDetail?.designation
                              ? employeeDetail?.designation
                              : 'N/A'}
                          </p>
                        </Grid>
                      </Grid>
                      <Grid item md={12} className="d-flex">
                        <Grid item md={6}>
                          <div>
                            <div className="font-size-sm font-weight-bold mb-1">
                              Location
                            </div>
                          </div>
                        </Grid>
                        <Grid item md={6}>
                          <p className="opacity-8 font-size-sm mb-4">
                            {employeeDetail?.location
                              ? employeeDetail?.location
                              : 'N/A'}
                          </p>
                        </Grid>
                      </Grid>
                    </Grid>
                  </Grid>
                </div>
              </Card>
            </Grid>
            <br />
            <Grid
              item
              container
              direction="row"
              spacing={6}
              justify="flex-end"
              alignItems="center">
              <Grid item md={10} className="mx-auto">
                <Radio
                  checked={!generatePasswordManually}
                  name="radio-isSuffix"
                  inputProps={{ 'aria-label': 'Suffix' }}
                  onChange={(event) => {
                    setGeneratePasswordManually(false);
                    setPassword(null);
                    setIsSubmitted(false);
                  }}
                  value={false}
                  disabled={employeeDetail == null}
                  label="generatePasswordAutomatically"
                />
                <label>
                  Application will auto-generate a password and send it
                  employee's Email Id
                </label>
                {!generatePasswordManually ? (
                  <Grid item md={10} className="mx-auto">
                    <Grid item container spacing={2} direction="row">
                      <Grid item md={4}>
                        <label style={{ marginTop: '10px' }} className="mb-2">
                          Password will be sent to{' '}
                        </label>
                      </Grid>
                      <Grid item md={6} className="mx-auto">
                        <TextField
                          id="outlined-description"
                          placeholder="Email"
                          type="text"
                          disabled={true}
                          variant="outlined"
                          fullWidth
                          size="small"
                          value={preferredEmail}
                        />
                      </Grid>
                    </Grid>
                  </Grid>
                ) : (
                  ''
                )}

                <Grid item md={12} className="mx-auto mb-3">
                  <Radio
                    checked={generatePasswordManually}
                    onChange={(event) => {
                      setGeneratePasswordManually(true);
                      setIsSubmitted(false);
                    }}
                    value={true}
                    disabled={employeeDetail == null}
                    name="radio-generatePasswordManually"
                    inputProps={{ 'aria-label': 'Prefix' }}
                    label="generatePasswordManually"
                  />
                  <label>Reset Employee's password as per text below</label>
                </Grid>
                {generatePasswordManually ? (
                  <Grid item md={8} className="mx-auto mb-4">
                    <TextField
                      id="outlined-description"
                      placeholder="Enter Password Here"
                      type="text"
                      variant="outlined"
                      fullWidth
                      size="small"
                      disabled={employeeDetail == null}
                      value={password}
                      error={
                        isSubmitted &&
                        generatePasswordManually &&
                        (password == null || password.length == 0)
                      }
                      helperText={
                        isSubmitted &&
                          generatePasswordManually &&
                          (password == null || password.length == 0)
                          ? 'Password Should not be Empty'
                          : null
                      }
                      onChange={(event) => {
                        setPassword(event.target.value);
                      }}
                    />
                    {errorMessages && (
                      <div style={{ color: 'red' }}>
                        {errorMessages.map((message, index) => (
                          <span key={index}>{message}<br /></span>
                        ))}
                      </div>
                    )}
                    {isValid && (
                      <span style={{ color: 'green' }}>Password is valid.</span>
                    )}
                  </Grid>
                ) : (
                  ''
                )}
                {passwordRulesList?.length > 0 && passwordRulesList[0].status && (
                  <>
                    <label>
                      * Password Should be Minimum of {passwordRulesList[0].minLength}{' '}
                      Characters Long and Maximum {passwordRulesList[0].maxLength}{' '}
                      Characters Long.
                    </label>
                    <br />
                  </>
                )}
                {passwordRulesList?.length > 1 && passwordRulesList[1].status && (
                  <>
                    <label>
                      * Password Should not be Same as last{' '}
                      {passwordRulesList[1].count}.
                    </label>
                    <br />
                  </>
                )}
                {passwordRulesList?.length > 2 && passwordRulesList[2].status && (
                  <>
                    <label>
                      * Password Should be Contain {passwordRulesList[2].minOrMax}{' '}
                      {passwordRulesList[2].length} {passwordRulesList[2].type}.
                    </label>
                    <br />
                  </>
                )}
                {passwordRulesList?.length > 3 && passwordRulesList[3].status && (
                  <>
                    <label>
                      * Password Should be Contain {passwordRulesList[3].minOrMax}{' '}
                      {passwordRulesList[3].length} {passwordRulesList[3].type}.
                    </label>
                    <br />
                  </>
                )}
                {passwordRulesList?.length > 4 && passwordRulesList[4].status && (
                  <>
                    <label>
                      * Password Should be Contain {passwordRulesList[4].minOrMax}{' '}
                      {passwordRulesList[4].length} {passwordRulesList[4].type}.
                    </label>
                    <br />
                  </>
                )}
              </Grid>
            </Grid>

            <Snackbar
              anchorOrigin={{ vertical, horizontal }}
              key={`${vertical},${horizontal}`}
              open={openToast}
              classes={{ root: toastrStyle }}
              onClose={handleClose}
              message={message}
              autoHideDuration={2000}
            />
          </Grid>
          <br />
          <Box textAlign="right">
            <Button
              className="btn-primary mb-2 mr-3"
              component={NavLink}
              to="./employees">
              Cancel
            </Button>
            <Button
              className="btn-primary mb-2 mr-3"
              type="submit"
              disabled={employeeDetail == null}
              onClick={(e) => validatePassword()}>
              Reset Password
            </Button>
          </Box>
        </Card>
      </BlockUi>
    </>
  );
};
const mapStateToProps = (state) => ({
  selectedEmployee: state.Auth.selectedEmployee,
  selectedCompany: state.Auth.selectedCompany
});
const mapDispatchToProps = (dispatch) => ({});

export default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordByAdmin);
